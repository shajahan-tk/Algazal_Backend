{"version":3,"file":"userValidator.js","sourceRoot":"","sources":["../../src/validators/userValidator.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,qDAAqD;AAErD,sCAAsC;AACtC,oEAAoE;AACpE,qBAAqB;AACrB,4BAA4B;AAC5B,8DAA8D;AAC9D,yBAAyB;AACzB,2BAA2B;AAC3B,6DAA6D;AAC7D,2BAA2B;AAC3B,kBAAkB;AAClB,qDAAqD;AACrD,wEAAwE;AACxE,sEAAsE;AACtE,iFAAiF;AACjF,yCAAyC;AACzC,2CAA2C;AAC3C,2DAA2D;AAC3D,4CAA4C;AAC5C,+BAA+B;AAC/B,qEAAqE;AACrE,QAAQ;AACR,cAAc;AACd,OAAO;AACP,KAAK;AAEL,sCAAsC;AACtC,+EAA+E;AAC/E,qBAAqB;AACrB,kBAAkB;AAClB,4BAA4B;AAC5B,8DAA8D;AAC9D,yBAAyB;AACzB,kBAAkB;AAClB,2BAA2B;AAC3B,6DAA6D;AAC7D,2BAA2B;AAC3B,kBAAkB;AAClB,kBAAkB;AAClB,qDAAqD;AACrD,mFAAmF;AACnF,iFAAiF;AACjF,iBAAiB;AACjB,kBAAkB;AAClB,qCAAqC;AACrC,yCAAyC;AACzC,yCAAyC;AACzC,2CAA2C;AAC3C,2DAA2D;AAC3D,4CAA4C;AAC5C,+BAA+B;AAC/B,qEAAqE;AACrE,QAAQ;AACR,cAAc;AACd,OAAO;AACP,KAAK","sourcesContent":["// import { Request, Response, NextFunction } from \"express\";\r\n// import { validationResult, body } from \"express-validator\";\r\n// import { ApiError } from \"../utils/apiHandlerHelpers\";\r\n// // import { UserRole } from \"../models/userModel\";\r\n\r\n// export const validateUserCreate = [\r\n//   body(\"email\").isEmail().withMessage(\"Valid email is required\"),\r\n//   body(\"password\")\r\n//     .isLength({ min: 8 })\r\n//     .withMessage(\"Password must be at least 8 characters\"),\r\n//   body(\"phoneNumbers\")\r\n//     .isArray({ min: 1 })\r\n//     .withMessage(\"At least one phone number is required\"),\r\n//   body(\"phoneNumbers.*\")\r\n//     .isString()\r\n//     .withMessage(\"Phone numbers must be strings\"),\r\n//   body(\"firstName\").notEmpty().withMessage(\"First name is required\"),\r\n//   body(\"lastName\").notEmpty().withMessage(\"Last name is required\"),\r\n//   body(\"role\").isIn(Object.values(UserRole)).withMessage(\"Invalid user role\"),\r\n//   body(\"image\").optional().isString(),\r\n//   body(\"address\").optional().isString(),\r\n//   (req: Request, res: Response, next: NextFunction) => {\r\n//     const errors = validationResult(req);\r\n//     if (!errors.isEmpty()) {\r\n//       throw new ApiError(400, \"Validation error\", errors.array());\r\n//     }\r\n//     next();\r\n//   },\r\n// ];\r\n\r\n// export const validateUserUpdate = [\r\n//   body(\"email\").optional().isEmail().withMessage(\"Valid email is required\"),\r\n//   body(\"password\")\r\n//     .optional()\r\n//     .isLength({ min: 8 })\r\n//     .withMessage(\"Password must be at least 8 characters\"),\r\n//   body(\"phoneNumbers\")\r\n//     .optional()\r\n//     .isArray({ min: 1 })\r\n//     .withMessage(\"At least one phone number is required\"),\r\n//   body(\"phoneNumbers.*\")\r\n//     .optional()\r\n//     .isString()\r\n//     .withMessage(\"Phone numbers must be strings\"),\r\n//   body(\"firstName\").optional().notEmpty().withMessage(\"First name is required\"),\r\n//   body(\"lastName\").optional().notEmpty().withMessage(\"Last name is required\"),\r\n//   body(\"role\")\r\n//     .optional()\r\n//     .isIn(Object.values(UserRole))\r\n//     .withMessage(\"Invalid user role\"),\r\n//   body(\"image\").optional().isString(),\r\n//   body(\"address\").optional().isString(),\r\n//   (req: Request, res: Response, next: NextFunction) => {\r\n//     const errors = validationResult(req);\r\n//     if (!errors.isEmpty()) {\r\n//       throw new ApiError(400, \"Validation error\", errors.array());\r\n//     }\r\n//     next();\r\n//   },\r\n// ];\r\n"]}
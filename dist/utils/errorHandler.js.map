{"version":3,"file":"errorHandler.js","sourceRoot":"","sources":["../../src/utils/errorHandler.ts"],"names":[],"mappings":";;;AACA,2DAA+C;AAC/C,MAAM,YAAY,GAAwB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC9D,8DAA8D;IAC9D,IAAI,GAAG,YAAY,4BAAQ,EAAE,CAAC;QAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;YAC5B,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,MAAM,EAAE,GAAG,CAAC,MAAM,IAAI,EAAE;YACxB,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;SACxE,CAAC,CAAC;QACH,OAAO;IACX,CAAC;IAED,gCAAgC;IAChC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACjB,OAAO,EAAE,KAAK;QACd,UAAU,EAAE,GAAG;QACf,OAAO,EAAE,uBAAuB;QAChC,MAAM,EAAE,EAAE;QACV,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;KACxE,CAAC,CAAC;AACP,CAAC,CAAC;AAEO,oCAAY","sourcesContent":["import { Request, Response, NextFunction, ErrorRequestHandler } from \"express\";\r\nimport { ApiError } from \"./apiHandlerHelpers\";\r\nconst errorHandler: ErrorRequestHandler = (err, req, res, next) => {\r\n    // If the error is an instance of ApiError, use its properties\r\n    if (err instanceof ApiError) {\r\n        res.status(err.statusCode).json({\r\n            success: err.success,\r\n            statusCode: err.statusCode,\r\n            message: err.message,\r\n            errors: err.errors || [],\r\n            stack: process.env.NODE_ENV === \"development\" ? err.stack : undefined,\r\n        });\r\n        return;\r\n    }\r\n\r\n    // Fallback for unhandled errors\r\n    res.status(500).json({\r\n        success: false,\r\n        statusCode: 500,\r\n        message: \"Internal Server Error\",\r\n        errors: [],\r\n        stack: process.env.NODE_ENV === \"development\" ? err.stack : undefined,\r\n    });\r\n};\r\n\r\nexport { errorHandler };"]}
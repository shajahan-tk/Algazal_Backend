{"version":3,"file":"uploadConf.js","sourceRoot":"","sources":["../../src/utils/uploadConf.ts"],"names":[],"mappings":"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","sourcesContent":["import { S3Client, DeleteObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { Upload } from \"@aws-sdk/lib-storage\";\r\nimport sharp from \"sharp\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\nimport path from \"path\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nconst s3 = new S3Client({\r\n  region: \"ap-south-1\",\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID || \"\",\r\n    secretAccessKey:\r\n      process.env.AWS_SECRET_ACCESS_KEY ||\r\n      \"\",\r\n  },\r\n});\r\n\r\nconst BUCKET_NAME = \"agats\";\r\nconst USER_IMAGES_FOLDER = \"user-images\";\r\nconst ITEM_IMAGES_FOLDER = \"item-images\";\r\nconst SIGNATURES_FOLDER = \"signatures\";\r\nconst WORK_COMPLETION_FOLDER = \"work-completion-images\";\r\nconst EMIRATES_ID_FOLDER = \"emirates-id-documents\";\r\nconst PASSPORT_FOLDER = \"passport-documents\";\r\nconst EXPENSE_DOCUMENTS_FOLDER = \"expense-documents\";\r\n\r\nfunction generateUniqueFileName(file: Express.Multer.File): string {\r\n  const extension = path.extname(file.originalname);\r\n  const filename = path.basename(file.originalname, extension);\r\n  const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n  return `${filename}-${uniqueSuffix}${extension}`;\r\n}\r\n\r\nasync function uploadFileToS3(\r\n  file: Express.Multer.File,\r\n  folder?: string\r\n): Promise<{ url: string; key: string; mimetype: string }> {\r\n  const uniqueFileName = folder\r\n    ? `${folder}/${generateUniqueFileName(file)}`\r\n    : generateUniqueFileName(file);\r\n\r\n  const uploadParams = {\r\n    Bucket: BUCKET_NAME,\r\n    Key: uniqueFileName,\r\n    Body: file.buffer,\r\n    ContentType: file.mimetype,\r\n  };\r\n\r\n  const upload = new Upload({\r\n    client: s3,\r\n    params: uploadParams,\r\n  });\r\n\r\n  await upload.done();\r\n  const fileUrl = `https://${BUCKET_NAME}.s3.ap-south-1.amazonaws.com/${encodeURIComponent(\r\n    uniqueFileName\r\n  )}`;\r\n\r\n  return {\r\n    url: fileUrl,\r\n    key: uniqueFileName,\r\n    mimetype: file.mimetype,\r\n  };\r\n}\r\n\r\nasync function processImage(\r\n  file: Express.Multer.File,\r\n  options?: { width?: number; height?: number; format?: \"jpeg\" | \"png\" }\r\n): Promise<Buffer> {\r\n  const { width = 800, height, format = \"jpeg\" } = options || {};\r\n\r\n  let processor = sharp(file.buffer).resize({\r\n    width,\r\n    height,\r\n    fit: \"inside\",\r\n    withoutEnlargement: true,\r\n  });\r\n\r\n  if (format === \"jpeg\") {\r\n    processor = processor.jpeg({ quality: 85, mozjpeg: true });\r\n  } else {\r\n    processor = processor.png({ quality: 90, compressionLevel: 8 });\r\n  }\r\n\r\n  return processor.toBuffer();\r\n}\r\n\r\nexport async function uploadUserProfileImage(\r\n  file: Express.Multer.File\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    const processedFileBuffer = await sharp(file.buffer)\r\n      .resize({ width: 500, height: 500, fit: \"cover\" })\r\n      .jpeg({ quality: 80, mozjpeg: true })\r\n      .toBuffer();\r\n\r\n    const processedFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer,\r\n      mimetype: \"image/jpeg\",\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(\r\n      processedFile,\r\n      USER_IMAGES_FOLDER\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      message: \"User profile image uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading user profile image:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"User profile image upload failed\",\r\n    };\r\n  }\r\n}\r\nexport async function uploadEmiratesIdDocument(\r\n  file: Express.Multer.File\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    // Validate file type\r\n    const validTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n    if (!validTypes.includes(file.mimetype)) {\r\n      return {\r\n        success: false,\r\n        message: \"Invalid file type. Only JPEG, PNG, and PDF are allowed.\",\r\n      };\r\n    }\r\n\r\n    let processedFileBuffer: Buffer | undefined;\r\n    let processedMimeType = file.mimetype;\r\n\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      // Process images (resize and optimize)\r\n      processedFileBuffer = await sharp(file.buffer)\r\n        .resize({ width: 1200, fit: \"inside\", withoutEnlargement: true })\r\n        .jpeg({ quality: 85, mozjpeg: true })\r\n        .toBuffer();\r\n      processedMimeType = \"image/jpeg\";\r\n    } else if (file.mimetype === \"application/pdf\") {\r\n      // Compress PDFs\r\n      processedFileBuffer = await compressPDFBuffer(file.buffer);\r\n    }\r\n\r\n    const processedFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer || file.buffer,\r\n      mimetype: processedMimeType,\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(\r\n      processedFile,\r\n      EMIRATES_ID_FOLDER\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Emirates ID document uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading Emirates ID document:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"Emirates ID document upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function uploadPassportDocument(\r\n  file: Express.Multer.File\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    // Validate file type\r\n    const validTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n    if (!validTypes.includes(file.mimetype)) {\r\n      return {\r\n        success: false,\r\n        message: \"Invalid file type. Only JPEG, PNG, and PDF are allowed.\",\r\n      };\r\n    }\r\n\r\n    let processedFileBuffer: Buffer | undefined;\r\n    let processedMimeType = file.mimetype;\r\n\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      // Process images (resize and optimize)\r\n      processedFileBuffer = await sharp(file.buffer)\r\n        .resize({ width: 1200, fit: \"inside\", withoutEnlargement: true })\r\n        .jpeg({ quality: 85, mozjpeg: true })\r\n        .toBuffer();\r\n      processedMimeType = \"image/jpeg\";\r\n    } else if (file.mimetype === \"application/pdf\") {\r\n      // Compress PDFs\r\n      processedFileBuffer = await compressPDFBuffer(file.buffer);\r\n    }\r\n\r\n    const processedFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer || file.buffer,\r\n      mimetype: processedMimeType,\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(processedFile, PASSPORT_FOLDER);\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Passport document uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading Passport document:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"Passport document upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function uploadItemImage(file: Express.Multer.File): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    console.log(\"inside uploadItemImage function\", file);\r\n\r\n    const processedFileBuffer = await sharp(file.buffer)\r\n      .resize({ width: 800, height: 600, fit: \"inside\" })\r\n      .jpeg({ quality: 80, mozjpeg: true })\r\n      .toBuffer();\r\n\r\n    const processedFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer,\r\n      mimetype: \"image/jpeg\",\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(\r\n      processedFile,\r\n      ITEM_IMAGES_FOLDER\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Item image uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading item image:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"Item image upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function uploadSignatureImage(file: Express.Multer.File): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    const processedFileBuffer = await sharp(file.buffer)\r\n      .resize({\r\n        width: 400,\r\n        height: 200,\r\n        fit: \"contain\",\r\n        background: { r: 0, g: 0, b: 0, alpha: 0 },\r\n      })\r\n      .png({ quality: 90, compressionLevel: 9 })\r\n      .toBuffer();\r\n\r\n    const processedFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer,\r\n      mimetype: \"image/png\",\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(processedFile, SIGNATURES_FOLDER);\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Signature image uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading signature image:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"Signature image upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function handleSingleFileUpload(\r\n  file: Express.Multer.File\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    let processedFileBuffer: Buffer | undefined;\r\n\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      processedFileBuffer = await processImage(file);\r\n    } else if (file.mimetype === \"application/pdf\") {\r\n      processedFileBuffer = await compressPDFBuffer(file.buffer);\r\n    }\r\n\r\n    const finalFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer || file.buffer,\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(finalFile);\r\n\r\n    return {\r\n      success: true,\r\n      message: \"File uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading file:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"File upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function handleMultipleFileUploads(\r\n  files: Express.Multer.File[]\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: Array<{ url: string; key: string; mimetype: string }>;\r\n}> {\r\n  try {\r\n    const uploadResults = await Promise.all(\r\n      files.map(async (file) => {\r\n        let processedFileBuffer: Buffer | undefined;\r\n\r\n        if (file.mimetype.startsWith(\"image/\")) {\r\n          processedFileBuffer = await processImage(file);\r\n        } else if (file.mimetype === \"application/pdf\") {\r\n          processedFileBuffer = await compressPDFBuffer(file.buffer);\r\n        }\r\n\r\n        const finalFile = {\r\n          ...file,\r\n          buffer: processedFileBuffer || file.buffer,\r\n        };\r\n\r\n        return await uploadFileToS3(finalFile);\r\n      })\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Files uploaded successfully\",\r\n      uploadData: uploadResults,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading files:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"File upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function uploadExpenseDocument(\r\n  file: Express.Multer.File\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: { url: string; key: string; mimetype: string };\r\n}> {\r\n  try {\r\n    // Validate file type\r\n    const validTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"];\r\n    if (!validTypes.includes(file.mimetype)) {\r\n      return {\r\n        success: false,\r\n        message: \"Invalid file type. Only JPEG, PNG, and PDF are allowed.\",\r\n      };\r\n    }\r\n\r\n    let processedFileBuffer: Buffer | undefined;\r\n    let processedMimeType = file.mimetype;\r\n\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      // Process images (resize and optimize)\r\n      processedFileBuffer = await sharp(file.buffer)\r\n        .resize({ width: 1200, fit: \"inside\", withoutEnlargement: true })\r\n        .jpeg({ quality: 85, mozjpeg: true })\r\n        .toBuffer();\r\n      processedMimeType = \"image/jpeg\";\r\n    } else if (file.mimetype === \"application/pdf\") {\r\n      // Compress PDFs\r\n      processedFileBuffer = await compressPDFBuffer(file.buffer);\r\n    }\r\n\r\n    const processedFile = {\r\n      ...file,\r\n      buffer: processedFileBuffer || file.buffer,\r\n      mimetype: processedMimeType,\r\n    };\r\n\r\n    const uploadResult = await uploadFileToS3(\r\n      processedFile,\r\n      EXPENSE_DOCUMENTS_FOLDER\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Expense document uploaded successfully\",\r\n      uploadData: uploadResult,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading expense document:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"Expense document upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function deleteFileFromS3(key: string): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n}> {\r\n  try {\r\n    const deleteParams = {\r\n      Bucket: BUCKET_NAME,\r\n      Key: key,\r\n    };\r\n\r\n    const command = new DeleteObjectCommand(deleteParams);\r\n    await s3.send(command);\r\n\r\n    return {\r\n      success: true,\r\n      message: `File deleted successfully: ${key}`,\r\n    };\r\n  } catch (err) {\r\n    console.error(`Error deleting file from S3: ${err}`);\r\n    return {\r\n      success: false,\r\n      message: \"Failed to delete file from S3\",\r\n    };\r\n  }\r\n}\r\n\r\nexport function getS3KeyFromUrl(url: string): string {\r\n  try {\r\n    const urlObj = new URL(url);\r\n    return decodeURIComponent(urlObj.pathname.substring(1));\r\n  } catch (err) {\r\n    console.error(\"Error parsing S3 URL:\", err);\r\n    throw new Error(\"Invalid S3 URL\");\r\n  }\r\n}\r\nasync function compressPDFBuffer(pdfBuffer: Buffer): Promise<Buffer> {\r\n  try {\r\n    const pdfDoc = await PDFDocument.load(pdfBuffer);\r\n    const compressedPDFBytes = await pdfDoc.save();\r\n    return Buffer.from(compressedPDFBytes);\r\n  } catch (error) {\r\n    console.error(\"Error compressing PDF:\", error);\r\n    throw new Error(\"Failed to compress PDF\");\r\n  }\r\n}\r\n\r\nexport async function uploadWorkCompletionImagesToS3(\r\n  files: Express.Multer.File[]\r\n): Promise<{\r\n  success: boolean;\r\n  message: string;\r\n  uploadData?: Array<{ url: string; key: string; mimetype: string }>;\r\n}> {\r\n  try {\r\n    const uploadResults = await Promise.all(\r\n      files.map(async (file) => {\r\n        let processedFileBuffer: Buffer | undefined;\r\n\r\n        if (file.mimetype.startsWith(\"image/\")) {\r\n          processedFileBuffer = await processImage(file);\r\n        }\r\n\r\n        const finalFile = {\r\n          ...file,\r\n          buffer: processedFileBuffer || file.buffer,\r\n        };\r\n\r\n        return await uploadFileToS3(finalFile, WORK_COMPLETION_FOLDER);\r\n      })\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Work completion images uploaded successfully\",\r\n      uploadData: uploadResults,\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error uploading work completion images:\", err);\r\n    return {\r\n      success: false,\r\n      message: \"Work completion images upload failed\",\r\n    };\r\n  }\r\n}\r\n\r\nexport default {\r\n  uploadUserProfileImage,\r\n  uploadItemImage,\r\n  uploadSignatureImage,\r\n  handleSingleFileUpload,\r\n  handleMultipleFileUploads,\r\n  deleteFileFromS3,\r\n  getS3KeyFromUrl,\r\n};\r\n"]}
{"version":3,"file":"authMiddleware.js","sourceRoot":"","sources":["../../src/middlewares/authMiddleware.ts"],"names":[],"mappings":";;;;;;AACA,gEAA+B;AAC/B,mDAA2C;AAC3C,kEAAsD;AAc/C,MAAM,YAAY,GAAG,KAAK,EAC/B,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,IAAI,CAAC,IAAI,4BAAQ,CAAC,GAAG,EAAE,iCAAiC,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,gBAAgB,CAEjD,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,gBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACrE,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC,IAAI,4BAAQ,CAAC,GAAG,EAAE,8BAA8B,CAAC,CAAC,CAAC;QACjE,CAAC;QAED,GAAG,CAAC,IAAI,GAAG;YACT,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;YAC3B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;QAEF,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,IAAI,CAAC,IAAI,4BAAQ,CAAC,GAAG,EAAE,6BAA6B,CAAC,CAAC,CAAC;IAChE,CAAC;AACH,CAAC,CAAC;AA9BW,QAAA,YAAY,gBA8BvB;AAEK,MAAM,SAAS,GAAG,CAAC,KAAe,EAAE,EAAE;IAC3C,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC,IAAI,4BAAQ,CAAC,GAAG,EAAE,qCAAqC,CAAC,CAAC,CAAC;QACxE,CAAC;QACD,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC,CAAC;AAPW,QAAA,SAAS,aAOpB","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { User } from \"../models/userModel\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\n\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      user?: {\r\n        userId: string;\r\n        email: string;\r\n        role: string;\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const authenticate = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const token = req.header(\"Authorization\")?.split(\" \")[1];\r\n\r\n  if (!token) {\r\n    return next(new ApiError(401, \"Unauthorized: No token provided\"));\r\n  }\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, \"alghaza_secret\") as {\r\n      userId: string;\r\n    };\r\n    const user = await User.findById(decoded.userId).select(\"-password\");    \r\n    if (!user) {\r\n      return next(new ApiError(401, \"Unauthorized: User not found\"));\r\n    }\r\n\r\n    req.user = {\r\n      userId: user._id.toString(),\r\n      email: user.email,\r\n      role: user.role,\r\n    };\r\n\r\n    next();\r\n  } catch (error) {\r\n    return next(new ApiError(401, \"Unauthorized: Invalid token\"));\r\n  }\r\n};\r\n\r\nexport const authorize = (roles: string[]) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    if (!req.user || !roles.includes(req.user.role)) {\r\n      return next(new ApiError(403, \"Forbidden: Insufficient permissions\"));\r\n    }\r\n    next();\r\n  };\r\n};\r\n"]}
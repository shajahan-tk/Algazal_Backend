{"version":3,"file":"bankController.js","sourceRoot":"","sources":["../../src/controllers/bankController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { BankReport, BankReportType } from \"../models/bankModel\";\r\nimport { Shop } from \"../models/shopModel\";\r\nimport { Category } from \"../models/categoryModel\";\r\nimport {\r\n  handleMultipleFileUploads,\r\n  deleteFileFromS3,\r\n  getS3KeyFromUrl,\r\n} from \"../utils/uploadConf\";\r\nimport ExcelJS from \"exceljs\";\r\n\r\nexport const createBankReport = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const {\r\n      reportType,\r\n      reportDate,\r\n      amount,\r\n      remarks,\r\n      // ADIB fields\r\n      category,\r\n      shop,\r\n      // Expense fields\r\n      description,\r\n    } = req.body;\r\n\r\n    // Validate required fields\r\n    if (!reportType || !reportDate || !amount) {\r\n      throw new ApiError(400, \"Required fields are missing\");\r\n    }\r\n\r\n    // Validate report type specific fields\r\n    if (reportType === \"adib\") {\r\n      if (!category || !shop) {\r\n        throw new ApiError(\r\n          400,\r\n          \"Category and shop are required for ADIB reports\"\r\n        );\r\n      }\r\n    } else if (reportType === \"expense\") {\r\n      if (!description) {\r\n        throw new ApiError(400, \"Description is required for expense reports\");\r\n      }\r\n    }\r\n\r\n    // Check references\r\n    if (shop) {\r\n      const shopExists = await Shop.findById(shop);\r\n      if (!shopExists) {\r\n        throw new ApiError(404, \"Shop not found\");\r\n      }\r\n    }\r\n\r\n    if (category) {\r\n      const categoryExists = await Category.findById(category);\r\n      if (!categoryExists) {\r\n        throw new ApiError(404, \"Category not found\");\r\n      }\r\n    }\r\n\r\n    // Handle file uploads\r\n    let attachments: Array<{\r\n      fileName: string;\r\n      fileType: string;\r\n      filePath: string;\r\n    }> = [];\r\n\r\n    const files = Array.isArray(req.files)\r\n      ? req.files\r\n      : req.files\r\n      ? Object.values(req.files).flat()\r\n      : [];\r\n\r\n    if (files.length > 0) {\r\n      const uploadResults = await handleMultipleFileUploads(files);\r\n      if (!uploadResults.success) {\r\n        throw new ApiError(500, \"Failed to upload report attachments\");\r\n      }\r\n      attachments =\r\n        uploadResults.uploadData?.map((file) => ({\r\n          fileName: file.key.split(\"/\").pop() || \"attachment\",\r\n          fileType: file.mimetype,\r\n          filePath: file.url,\r\n        })) || [];\r\n    }\r\n\r\n    // Create the report\r\n    const report = await BankReport.create({\r\n      reportType,\r\n      reportDate: new Date(reportDate),\r\n      amount,\r\n      remarks,\r\n      attachments,\r\n      createdBy: req.user?.userId,\r\n      // ADIB fields\r\n      category,\r\n      shop,\r\n      // Expense fields\r\n      description,\r\n    });\r\n\r\n    res\r\n      .status(201)\r\n      .json(new ApiResponse(201, report, \"Bank report created successfully\"));\r\n  }\r\n);\r\n\r\n// Get all reports with filters\r\nexport const getBankReports = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const page = parseInt(req.query.page as string) || 1;\r\n    const limit = parseInt(req.query.limit as string) || 10;\r\n    const skip = (page - 1) * limit;\r\n\r\n    const filter: any = {};\r\n\r\n    // Report type filter\r\n    if (req.query.reportType) {\r\n      filter.reportType = req.query.reportType;\r\n    }\r\n\r\n    // Date range filter\r\n    if (req.query.startDate && req.query.endDate) {\r\n      filter.reportDate = {\r\n        $gte: new Date(req.query.startDate as string),\r\n        $lte: new Date(req.query.endDate as string),\r\n      };\r\n    } else {\r\n      // Year filter\r\n      if (req.query.year) {\r\n        const year = parseInt(req.query.year as string);\r\n        if (isNaN(year)) {\r\n          throw new ApiError(400, \"Invalid year value\");\r\n        }\r\n        filter.reportDate = {\r\n          $gte: new Date(year, 0, 1),\r\n          $lte: new Date(year + 1, 0, 1),\r\n        };\r\n      }\r\n\r\n      // Month filter\r\n      if (req.query.month) {\r\n        const month = parseInt(req.query.month as string);\r\n        if (isNaN(month) || month < 1 || month > 12) {\r\n          throw new ApiError(400, \"Invalid month value (1-12)\");\r\n        }\r\n\r\n        if (!filter.reportDate) {\r\n          const currentYear = new Date().getFullYear();\r\n          filter.reportDate = {\r\n            $gte: new Date(currentYear, month - 1, 1),\r\n            $lt: new Date(currentYear, month, 1),\r\n          };\r\n        } else {\r\n          const startDate = new Date(filter.reportDate.$gte);\r\n          startDate.setMonth(month - 1);\r\n          startDate.setDate(1);\r\n\r\n          const endDate = new Date(startDate);\r\n          endDate.setMonth(month);\r\n\r\n          filter.reportDate.$gte = startDate;\r\n          filter.reportDate.$lte = endDate;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Shop filter\r\n    if (req.query.shop) {\r\n      filter.shop = req.query.shop;\r\n    }\r\n\r\n    // Category filter\r\n    if (req.query.category) {\r\n      filter.category = req.query.category;\r\n    }\r\n\r\n    // Amount range filter\r\n    if (req.query.minAmount || req.query.maxAmount) {\r\n      filter.amount = {};\r\n      if (req.query.minAmount) {\r\n        filter.amount.$gte = parseFloat(req.query.minAmount as string);\r\n      }\r\n      if (req.query.maxAmount) {\r\n        filter.amount.$lte = parseFloat(req.query.maxAmount as string);\r\n      }\r\n    }\r\n\r\n    // Search filter\r\n    if (req.query.search) {\r\n      filter.$or = [\r\n        { description: { $regex: req.query.search, $options: \"i\" } },\r\n        { remarks: { $regex: req.query.search, $options: \"i\" } },\r\n      ];\r\n    }\r\n\r\n    const total = await BankReport.countDocuments(filter);\r\n\r\n    // Calculate total amount of all matching reports\r\n    const totalAmountResult = await BankReport.aggregate([\r\n      { $match: filter },\r\n      { $group: { _id: null, totalAmount: { $sum: \"$amount\" } } },\r\n    ]);\r\n    const totalAmount = totalAmountResult[0]?.totalAmount || 0;\r\n\r\n    const reports = await BankReport.find(filter)\r\n      .skip(skip)\r\n      .limit(limit)\r\n      .sort({ reportDate: -1 })\r\n      .populate(\"category\", \"name description\")\r\n      .populate(\"shop\", \"shopName shopNo\")\r\n      .populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          reports,\r\n          totalAmount,\r\n          pagination: {\r\n            total,\r\n            page,\r\n            limit,\r\n            totalPages: Math.ceil(total / limit),\r\n            hasNextPage: page * limit < total,\r\n            hasPreviousPage: page > 1,\r\n          },\r\n        },\r\n        \"Bank reports retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// Get a single report by ID\r\nexport const getBankReport = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const report = await BankReport.findById(id)\r\n      .populate(\"category\", \"name description\")\r\n      .populate(\"shop\", \"shopName shopNo\")\r\n      .populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n    if (!report) {\r\n      throw new ApiError(404, \"Bank report not found\");\r\n    }\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, report, \"Bank report retrieved successfully\"));\r\n  }\r\n);\r\n\r\nexport const updateBankReport = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n    const updateData = req.body;\r\n\r\n    const report = await BankReport.findById(id);\r\n    if (!report) {\r\n      throw new ApiError(404, \"Bank report not found\");\r\n    }\r\n\r\n    // Check references if being updated\r\n    if (updateData.shop) {\r\n      const shopExists = await Shop.findById(updateData.shop);\r\n      if (!shopExists) {\r\n        throw new ApiError(404, \"Shop not found\");\r\n      }\r\n    }\r\n\r\n    if (updateData.category) {\r\n      const categoryExists = await Category.findById(updateData.category);\r\n      if (!categoryExists) {\r\n        throw new ApiError(404, \"Category not found\");\r\n      }\r\n    }\r\n\r\n    // Handle file uploads for new attachments\r\n    let newAttachments: Array<{\r\n      fileName: string;\r\n      fileType: string;\r\n      filePath: string;\r\n    }> = [];\r\n\r\n    const files = Array.isArray(req.files)\r\n      ? req.files\r\n      : req.files\r\n      ? Object.values(req.files).flat()\r\n      : [];\r\n\r\n    if (files.length > 0) {\r\n      const uploadResults = await handleMultipleFileUploads(files);\r\n      if (!uploadResults.success) {\r\n        throw new ApiError(500, \"Failed to upload new report attachments\");\r\n      }\r\n      newAttachments =\r\n        uploadResults.uploadData?.map((file) => ({\r\n          fileName: file.key.split(\"/\").pop() || \"attachment\",\r\n          fileType: file.mimetype,\r\n          filePath: file.url,\r\n        })) || [];\r\n    }\r\n\r\n    // Handle attachment deletions if specified\r\n    if (\r\n      updateData.deletedAttachments &&\r\n      updateData.deletedAttachments.length > 0\r\n    ) {\r\n      await Promise.all(\r\n        updateData.deletedAttachments.map(async (attachmentId: string) => {\r\n          const attachment = report.attachments.id(attachmentId);\r\n          if (attachment) {\r\n            try {\r\n              const key = getS3KeyFromUrl(attachment.filePath);\r\n              await deleteFileFromS3(key);\r\n              report.attachments.pull(attachmentId);\r\n            } catch (error) {\r\n              console.error(\r\n                `Failed to delete file from S3: ${attachment.filePath}`,\r\n                error\r\n              );\r\n            }\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    // Prepare update payload\r\n    const updatePayload: any = {\r\n      ...updateData,\r\n      $push: { attachments: { $each: newAttachments } },\r\n    };\r\n\r\n    // Convert dates if they exist in updateData\r\n    if (updateData.reportDate) {\r\n      updatePayload.reportDate = new Date(updateData.reportDate);\r\n    }\r\n\r\n    // Validate report type specific fields if type is being changed\r\n    if (updateData.reportType) {\r\n      if (updateData.reportType === \"adib\") {\r\n        if (!updateData.category || !updateData.shop) {\r\n          throw new ApiError(\r\n            400,\r\n            \"Category and shop are required for ADIB reports\"\r\n          );\r\n        }\r\n      } else if (updateData.reportType === \"expense\") {\r\n        if (!updateData.description) {\r\n          throw new ApiError(\r\n            400,\r\n            \"Description is required for expense reports\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Update the report\r\n    const updatedReport = await BankReport.findByIdAndUpdate(\r\n      id,\r\n      updatePayload,\r\n      {\r\n        new: true,\r\n      }\r\n    )\r\n      .populate(\"category\", \"name description\")\r\n      .populate(\"shop\", \"shopName shopNo\")\r\n      .populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n    if (!updatedReport) {\r\n      throw new ApiError(500, \"Failed to update bank report\");\r\n    }\r\n\r\n    res\r\n      .status(200)\r\n      .json(\r\n        new ApiResponse(200, updatedReport, \"Bank report updated successfully\")\r\n      );\r\n  }\r\n);\r\n\r\n// Delete a report\r\nexport const deleteBankReport = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const report = await BankReport.findById(id);\r\n    if (!report) {\r\n      throw new ApiError(404, \"Bank report not found\");\r\n    }\r\n\r\n    // Delete all associated files from S3\r\n    if (report.attachments && report.attachments.length > 0) {\r\n      await Promise.all(\r\n        report.attachments.map(async (attachment) => {\r\n          try {\r\n            const key = getS3KeyFromUrl(attachment.filePath);\r\n            await deleteFileFromS3(key);\r\n          } catch (error) {\r\n            console.error(\r\n              `Failed to delete file from S3: ${attachment.filePath}`,\r\n              error\r\n            );\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    await BankReport.findByIdAndDelete(id);\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, null, \"Bank report deleted successfully\"));\r\n  }\r\n);\r\n\r\n// Get financial summary\r\nexport const getBankFinancialSummary = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { startDate, endDate, groupBy } = req.query;\r\n\r\n    const match: any = {};\r\n    if (startDate && endDate) {\r\n      match.reportDate = {\r\n        $gte: new Date(startDate as string),\r\n        $lte: new Date(endDate as string),\r\n      };\r\n    }\r\n\r\n    let groupStage: any;\r\n    switch (groupBy) {\r\n      case \"month\":\r\n        groupStage = {\r\n          $group: {\r\n            _id: {\r\n              year: { $year: \"$reportDate\" },\r\n              month: { $month: \"$reportDate\" },\r\n              reportType: \"$reportType\",\r\n            },\r\n            totalAmount: { $sum: \"$amount\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n        break;\r\n      case \"reportType\":\r\n        groupStage = {\r\n          $group: {\r\n            _id: \"$reportType\",\r\n            totalAmount: { $sum: \"$amount\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n        break;\r\n      case \"category\":\r\n        groupStage = {\r\n          $group: {\r\n            _id: \"$category\",\r\n            totalAmount: { $sum: \"$amount\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n        break;\r\n      case \"shop\":\r\n        groupStage = {\r\n          $group: {\r\n            _id: \"$shop\",\r\n            totalAmount: { $sum: \"$amount\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n        break;\r\n      default:\r\n        groupStage = {\r\n          $group: {\r\n            _id: null,\r\n            totalAmount: { $sum: \"$amount\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n    }\r\n\r\n    const pipeline: any[] = [{ $match: match }, groupStage];\r\n\r\n    if (groupBy === \"shop\" || groupBy === \"category\") {\r\n      const lookupCollection = groupBy === \"shop\" ? \"shops\" : \"categories\";\r\n      const fieldName = groupBy === \"shop\" ? \"shopDetails\" : \"categoryDetails\";\r\n\r\n      pipeline.push({\r\n        $lookup: {\r\n          from: lookupCollection,\r\n          localField: \"_id\",\r\n          foreignField: \"_id\",\r\n          as: fieldName,\r\n        },\r\n      });\r\n      pipeline.push({ $unwind: `$${fieldName}` });\r\n\r\n      const projection: any = {\r\n        _id: 1,\r\n        totalAmount: 1,\r\n        count: 1,\r\n      };\r\n\r\n      if (groupBy === \"shop\") {\r\n        projection.shopName = `$${fieldName}.shopName`;\r\n        projection.shopNo = `$${fieldName}.shopNo`;\r\n      } else {\r\n        projection.categoryName = `$${fieldName}.name`;\r\n        projection.categoryDescription = `$${fieldName}.description`;\r\n      }\r\n\r\n      pipeline.push({ $project: projection });\r\n    }\r\n\r\n    pipeline.push({ $sort: { _id: 1 } });\r\n\r\n    const summary = await BankReport.aggregate(pipeline);\r\n\r\n    res\r\n      .status(200)\r\n      .json(\r\n        new ApiResponse(\r\n          200,\r\n          summary,\r\n          \"Bank financial summary retrieved successfully\"\r\n        )\r\n      );\r\n  }\r\n);\r\n\r\n// Get report statistics\r\nexport const getBankReportStatistics = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { startDate, endDate } = req.query;\r\n\r\n    const match: any = {};\r\n    if (startDate && endDate) {\r\n      match.reportDate = {\r\n        $gte: new Date(startDate as string),\r\n        $lte: new Date(endDate as string),\r\n      };\r\n    }\r\n\r\n    const stats = await BankReport.aggregate([\r\n      { $match: match },\r\n      {\r\n        $facet: {\r\n          totalAmount: [{ $group: { _id: null, total: { $sum: \"$amount\" } } }],\r\n          byType: [\r\n            { $group: { _id: \"$reportType\", total: { $sum: \"$amount\" } } },\r\n          ],\r\n          byMonth: [\r\n            {\r\n              $group: {\r\n                _id: {\r\n                  year: { $year: \"$reportDate\" },\r\n                  month: { $month: \"$reportDate\" },\r\n                },\r\n                total: { $sum: \"$amount\" },\r\n              },\r\n            },\r\n            { $sort: { \"_id.year\": 1, \"_id.month\": 1 } },\r\n          ],\r\n          topCategories: [\r\n            {\r\n              $group: {\r\n                _id: \"$category\",\r\n                total: { $sum: \"$amount\" },\r\n                count: { $sum: 1 },\r\n              },\r\n            },\r\n            { $sort: { total: -1 } },\r\n            { $limit: 5 },\r\n            {\r\n              $lookup: {\r\n                from: \"categories\",\r\n                localField: \"_id\",\r\n                foreignField: \"_id\",\r\n                as: \"categoryDetails\",\r\n              },\r\n            },\r\n            { $unwind: \"$categoryDetails\" },\r\n            {\r\n              $project: {\r\n                _id: 1,\r\n                total: 1,\r\n                count: 1,\r\n                categoryName: \"$categoryDetails.name\",\r\n                categoryDescription: \"$categoryDetails.description\",\r\n              },\r\n            },\r\n          ],\r\n          topShops: [\r\n            {\r\n              $group: {\r\n                _id: \"$shop\",\r\n                total: { $sum: \"$amount\" },\r\n                count: { $sum: 1 },\r\n              },\r\n            },\r\n            { $sort: { total: -1 } },\r\n            { $limit: 5 },\r\n            {\r\n              $lookup: {\r\n                from: \"shops\",\r\n                localField: \"_id\",\r\n                foreignField: \"_id\",\r\n                as: \"shopDetails\",\r\n              },\r\n            },\r\n            { $unwind: \"$shopDetails\" },\r\n            {\r\n              $project: {\r\n                _id: 1,\r\n                total: 1,\r\n                count: 1,\r\n                shopName: \"$shopDetails.shopName\",\r\n                shopNo: \"$shopDetails.shopNo\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ]);\r\n\r\n    res\r\n      .status(200)\r\n      .json(\r\n        new ApiResponse(\r\n          200,\r\n          stats[0],\r\n          \"Bank report statistics retrieved successfully\"\r\n        )\r\n      );\r\n  }\r\n);\r\n\r\nexport const exportBankReportsToExcel = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const filter: any = {};\r\n\r\n    // Report type filter\r\n    if (req.query.reportType) {\r\n      filter.reportType = req.query.reportType;\r\n    } \r\n    // Date range filter\r\n    if (req.query.startDate && req.query.endDate) {\r\n      filter.reportDate = {\r\n        $gte: new Date(req.query.startDate as string),\r\n        $lte: new Date(req.query.endDate as string),\r\n      };\r\n    }\r\n\r\n    // Shop filter\r\n    if (req.query.shop) {\r\n      filter.shop = req.query.shop;\r\n    }\r\n\r\n    // Category filter\r\n    if (req.query.category) {\r\n      filter.category = req.query.category;\r\n    }\r\n\r\n    // Amount range filter\r\n    if (req.query.minAmount || req.query.maxAmount) {\r\n      filter.amount = {};\r\n      if (req.query.minAmount) {\r\n        filter.amount.$gte = parseFloat(req.query.minAmount as string);\r\n      }\r\n      if (req.query.maxAmount) {\r\n        filter.amount.$lte = parseFloat(req.query.maxAmount as string);\r\n      }\r\n    }\r\n\r\n    // Search filter\r\n    if (req.query.search) {\r\n      filter.$or = [\r\n        { description: { $regex: req.query.search, $options: \"i\" } },\r\n        { remarks: { $regex: req.query.search, $options: \"i\" } },\r\n      ];\r\n    }\r\n\r\n    // Get all reports matching the filter\r\n    const reports = await BankReport.find(filter)\r\n      .sort({ reportDate: -1 })\r\n      .populate<{\r\n        category: { name: string } | null;\r\n        shop: { shopName: string; shopNo: string } | null;\r\n        createdBy: { firstName: string; lastName: string } | null;\r\n      }>([\r\n        { path: \"category\", select: \"name\" },\r\n        { path: \"shop\", select: \"shopName shopNo\" },\r\n        { path: \"createdBy\", select: \"firstName lastName\" },\r\n      ]);\r\n\r\n    // Create a new workbook\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(\"Bank Reports\");\r\n\r\n    // Define columns for each report type\r\n    const reportTypeColumns: Record<BankReportType, any[]> = {\r\n      adib: [\r\n        { header: \"SNO\", key: \"sno\", width: 5 },\r\n        { header: \"DATE\", key: \"reportDate\", width: 12, style: { numFmt: \"dd-mm-yyyy\" } },\r\n        { header: \"AMOUNT\", key: \"amount\", width: 12, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"CATEGORY\", key: \"category\", width: 20 },\r\n        { header: \"SHOP NAME\", key: \"shopName\", width: 25 },\r\n        { header: \"REMARKS\", key: \"remarks\", width: 30 }\r\n      ],\r\n      expense: [\r\n        { header: \"SNO\", key: \"sno\", width: 5 },\r\n        { header: \"DATE\", key: \"reportDate\", width: 12, style: { numFmt: \"dd-mm-yyyy\" } },\r\n        { header: \"DESCRIPTION\", key: \"description\", width: 30 },\r\n        { header: \"AMOUNT\", key: \"amount\", width: 12, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"REMARKS\", key: \"remarks\", width: 30 }\r\n      ]\r\n    };\r\n\r\n    // Determine which columns to use based on report type filter\r\n    let columns: any[] = [];\r\n    if (req.query.reportType && typeof req.query.reportType === \"string\") {\r\n      const reportType = req.query.reportType as BankReportType;\r\n      columns = reportTypeColumns[reportType];\r\n    } else {\r\n      // If no report type specified, use all possible columns (with unique keys)\r\n      const allColumns = Object.values(reportTypeColumns).flat();\r\n      const uniqueColumns = allColumns.filter(\r\n        (col, index, self) => index === self.findIndex((c) => c.key === col.key)\r\n      );\r\n      columns = uniqueColumns;\r\n    }\r\n\r\n    // Set the worksheet columns\r\n    worksheet.columns = columns;\r\n\r\n    // Add data rows\r\n    reports.forEach((report, index) => {\r\n      const rowData: any = {\r\n        sno: index + 1,\r\n        reportDate: report.reportDate,\r\n        amount: report.amount,\r\n        remarks: report.remarks || \"\"\r\n      };\r\n\r\n      // Type-specific fields\r\n      if (report.reportType === \"adib\") {\r\n        rowData.category = report.category && typeof report.category === \"object\"\r\n          ? report.category.name\r\n          : \"\";\r\n        rowData.shopName = report.shop && typeof report.shop === \"object\"\r\n          ? report.shop.shopName\r\n          : \"\";\r\n      } else if (report.reportType === \"expense\") {\r\n        rowData.description = report.description || \"\";\r\n      }\r\n\r\n      worksheet.addRow(rowData);\r\n    });\r\n\r\n    // Style the header row\r\n    worksheet.getRow(1).eachCell((cell) => {\r\n      cell.font = { bold: true };\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFD3D3D3\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n\r\n    // Freeze the header row\r\n    worksheet.views = [{ state: \"frozen\", ySplit: 1 }];\r\n\r\n    // Set response headers for Excel file download\r\n    res.setHeader(\r\n      \"Content-Type\",\r\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n    );\r\n    res.setHeader(\r\n      \"Content-Disposition\",\r\n      `attachment; filename=bank_reports_export_${\r\n        new Date().toISOString().split(\"T\")[0]\r\n      }.xlsx`\r\n    );\r\n\r\n    // Write the workbook to the response\r\n    await workbook.xlsx.write(res);\r\n    res.end();\r\n  }\r\n);\r\n"]}
{"version":3,"file":"vehicleController.js","sourceRoot":"","sources":["../../src/controllers/vehicleController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Vehicle } from \"../models/vehicleModel\";\r\nimport {\r\n  handleMultipleFileUploads,\r\n  deleteFileFromS3,\r\n  getS3KeyFromUrl,\r\n} from \"../utils/uploadConf\";\r\n\r\nexport const createVehicle = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const {\r\n      vehicleNumber,\r\n      vehicleType,\r\n      make,\r\n      model, // Frontend sends 'model'\r\n      year,\r\n      color,\r\n      registrationDate,\r\n      insuranceExpiry,\r\n      lastServiceDate,\r\n      currentMileage,\r\n      status,\r\n    } = req.body;\r\n\r\n    // Validate required fields\r\n    if (\r\n      !vehicleNumber ||\r\n      !vehicleType ||\r\n      !make ||\r\n      !model || // Validate 'model' from frontend\r\n      !year ||\r\n      !registrationDate ||\r\n      !insuranceExpiry\r\n    ) {\r\n      throw new ApiError(400, \"Required fields are missing\");\r\n    }\r\n\r\n    // Check if vehicle already exists\r\n    const existingVehicle = await Vehicle.findOne({\r\n      vehicleNumber: vehicleNumber.toUpperCase(),\r\n    });\r\n    if (existingVehicle) {\r\n      throw new ApiError(400, \"Vehicle with this number already exists\");\r\n    }\r\n\r\n    // Handle file uploads\r\n    let attachments: {\r\n      fileName: string;\r\n      fileType: string;\r\n      filePath: string;\r\n    }[] = [];\r\n\r\n    // Fix for req.files type issue\r\n    const files = Array.isArray(req.files)\r\n      ? req.files\r\n      : Object.values(req.files ?? {}).flat();\r\n\r\n    if (files && files.length > 0) {\r\n      const uploadResults = await handleMultipleFileUploads(files);\r\n      if (!uploadResults.success) {\r\n        throw new ApiError(500, \"Failed to upload vehicle attachments\");\r\n      }\r\n      attachments =\r\n        uploadResults.uploadData?.map((file) => ({\r\n          fileName: file.key.split(\"/\").pop() || \"attachment\",\r\n          fileType: file.mimetype,\r\n          filePath: file.url,\r\n        })) || [];\r\n    }\r\n\r\n    // Create vehicle - map frontend's 'model' to 'vechicleModel'\r\n    const vehicle = await Vehicle.create({\r\n      vehicleNumber: vehicleNumber.toUpperCase(),\r\n      vehicleType,\r\n      make,\r\n      vechicleModel: model, // Map to backend field\r\n      year,\r\n      color,\r\n      registrationDate: new Date(registrationDate),\r\n      insuranceExpiry: new Date(insuranceExpiry),\r\n      lastServiceDate: lastServiceDate ? new Date(lastServiceDate) : undefined,\r\n      currentMileage: currentMileage || 0,\r\n      status: status || \"active\",\r\n      attachments,\r\n      createdBy: req.user?.userId,\r\n    });\r\n\r\n    res\r\n      .status(201)\r\n      .json(new ApiResponse(201, vehicle, \"Vehicle created successfully\"));\r\n  }\r\n);\r\n\r\nexport const getVehicles = asyncHandler(async (req: Request, res: Response) => {\r\n  const page = parseInt(req.query.page as string) || 1;\r\n  const limit = parseInt(req.query.limit as string) || 10;\r\n  const skip = (page - 1) * limit;\r\n\r\n  const filter: any = {};\r\n\r\n  // Search functionality\r\n  if (req.query.search) {\r\n    const searchRegex = new RegExp(req.query.search as string, \"i\");\r\n    filter.$or = [\r\n      { vehicleNumber: searchRegex },\r\n      { make: searchRegex },\r\n      { vechicleModel: searchRegex }, // Search on backend field\r\n    ];\r\n  }\r\n\r\n  // Status filter\r\n  if (req.query.status) {\r\n    filter.status = req.query.status;\r\n  }\r\n\r\n  const total = await Vehicle.countDocuments(filter);\r\n  const vehicles = await Vehicle.find(filter)\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .sort({ vehicleNumber: 1 })\r\n    .populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n  // Map backend 'vechicleModel' to frontend 'model' in response\r\n  const responseVehicles = vehicles.map((vehicle) => ({\r\n    ...vehicle.toObject(),\r\n    model: vehicle.vechicleModel, // Map to frontend field\r\n  }));\r\n\r\n  res.status(200).json(\r\n    new ApiResponse(\r\n      200,\r\n      {\r\n        vehicles: responseVehicles,\r\n        pagination: {\r\n          total,\r\n          page,\r\n          limit,\r\n          totalPages: Math.ceil(total / limit),\r\n          hasNextPage: page * limit < total,\r\n          hasPreviousPage: page > 1,\r\n        },\r\n      },\r\n      \"Vehicles retrieved successfully\"\r\n    )\r\n  );\r\n});\r\n\r\nexport const getVehicle = asyncHandler(async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const vehicle = await Vehicle.findById(id).populate(\r\n    \"createdBy\",\r\n    \"firstName lastName email\"\r\n  );\r\n  if (!vehicle) {\r\n    throw new ApiError(404, \"Vehicle not found\");\r\n  }\r\n\r\n  // Map backend 'vechicleModel' to frontend 'model' in response\r\n  const responseVehicle = {\r\n    ...vehicle.toObject(),\r\n    model: vehicle.vechicleModel,\r\n  };\r\n\r\n  res\r\n    .status(200)\r\n    .json(\r\n      new ApiResponse(200, responseVehicle, \"Vehicle retrieved successfully\")\r\n    );\r\n});\r\n\r\nexport const updateVehicle = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n    const {\r\n      vehicleNumber,\r\n      vehicleType,\r\n      make,\r\n      model, // Frontend sends 'model'\r\n      year,\r\n      color,\r\n      registrationDate,\r\n      insuranceExpiry,\r\n      lastServiceDate,\r\n      currentMileage,\r\n      status,\r\n    } = req.body;\r\n\r\n    const vehicle = await Vehicle.findById(id);\r\n    if (!vehicle) {\r\n      throw new ApiError(404, \"Vehicle not found\");\r\n    }\r\n\r\n    // Check if vehicle number is being updated and conflicts with other vehicles\r\n    if (vehicleNumber && vehicleNumber !== vehicle.vehicleNumber) {\r\n      const existingVehicle = await Vehicle.findOne({\r\n        vehicleNumber: vehicleNumber.toUpperCase(),\r\n        _id: { $ne: id },\r\n      });\r\n      if (existingVehicle) {\r\n        throw new ApiError(400, \"Another vehicle already uses this number\");\r\n      }\r\n    }\r\n\r\n    // Handle file uploads for new attachments\r\n    let newAttachments: {\r\n      fileName: string;\r\n      fileType: string;\r\n      filePath: string;\r\n      fileSize?: number;\r\n    }[] = [];\r\n\r\n    // Fix for req.files type issue\r\n    const files = Array.isArray(req.files)\r\n      ? req.files\r\n      : req.files\r\n      ? Object.values(req.files).flat()\r\n      : [];\r\n\r\n    if (files.length > 0) {\r\n      const uploadResults = await handleMultipleFileUploads(files);\r\n      if (!uploadResults.success) {\r\n        throw new ApiError(500, \"Failed to upload new vehicle attachments\");\r\n      }\r\n      newAttachments =\r\n        uploadResults.uploadData?.map((file) => ({\r\n          fileName: file.key.split(\"/\").pop() || \"attachment\",\r\n          fileType: file.mimetype,\r\n          filePath: file.url,\r\n        })) || [];\r\n    }\r\n\r\n    // Prepare update data - map frontend 'model' to backend 'vechicleModel'\r\n    const updatePayload: any = {\r\n      vehicleNumber: vehicleNumber\r\n        ? vehicleNumber.toUpperCase()\r\n        : vehicle.vehicleNumber,\r\n      vehicleType: vehicleType || vehicle.vehicleType,\r\n      make: make || vehicle.make,\r\n      vechicleModel: model || vehicle.vechicleModel, // Map to backend field\r\n      year: year || vehicle.year,\r\n      color: color !== undefined ? color : vehicle.color,\r\n      registrationDate: registrationDate\r\n        ? new Date(registrationDate)\r\n        : vehicle.registrationDate,\r\n      insuranceExpiry: insuranceExpiry\r\n        ? new Date(insuranceExpiry)\r\n        : vehicle.insuranceExpiry,\r\n      lastServiceDate: lastServiceDate\r\n        ? new Date(lastServiceDate)\r\n        : vehicle.lastServiceDate,\r\n      currentMileage: currentMileage || vehicle.currentMileage,\r\n      status: status || vehicle.status,\r\n      $push: { attachments: { $each: newAttachments } },\r\n    };\r\n\r\n    const updatedVehicle = await Vehicle.findByIdAndUpdate(id, updatePayload, {\r\n      new: true,\r\n    }).populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n    if (!updatedVehicle) {\r\n      throw new ApiError(500, \"Failed to update vehicle\");\r\n    }\r\n\r\n    // Map backend 'vechicleModel' to frontend 'model' in response\r\n    const responseVehicle = {\r\n      ...updatedVehicle.toObject(),\r\n      model: updatedVehicle.vechicleModel,\r\n    };\r\n\r\n    res\r\n      .status(200)\r\n      .json(\r\n        new ApiResponse(200, responseVehicle, \"Vehicle updated successfully\")\r\n      );\r\n  }\r\n);\r\n\r\nexport const deleteVehicle = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const vehicle = await Vehicle.findById(id);\r\n    if (!vehicle) {\r\n      throw new ApiError(404, \"Vehicle not found\");\r\n    }\r\n\r\n    // Delete all associated files from S3\r\n    if (vehicle.attachments && vehicle.attachments.length > 0) {\r\n      await Promise.all(\r\n        vehicle.attachments.map(async (attachment) => {\r\n          try {\r\n            const key = getS3KeyFromUrl(attachment.filePath);\r\n            await deleteFileFromS3(key);\r\n          } catch (error) {\r\n            console.error(\r\n              `Failed to delete file from S3: ${attachment.filePath}`,\r\n              error\r\n            );\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    await Vehicle.findByIdAndDelete(id);\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, null, \"Vehicle deleted successfully\"));\r\n  }\r\n);\r\n\r\nexport const getVehicleByNumber = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { vehicleNumber } = req.params;\r\n\r\n    const vehicle = await Vehicle.findOne({\r\n      vehicleNumber: vehicleNumber.toUpperCase(),\r\n    }).populate(\"createdBy\", \"firstName lastName email\");\r\n    if (!vehicle) {\r\n      throw new ApiError(404, \"Vehicle not found\");\r\n    }\r\n\r\n    // Map backend 'vechicleModel' to frontend 'model' in response\r\n    const responseVehicle = {\r\n      ...vehicle.toObject(),\r\n      model: vehicle.vechicleModel,\r\n    };\r\n\r\n    res\r\n      .status(200)\r\n      .json(\r\n        new ApiResponse(200, responseVehicle, \"Vehicle retrieved successfully\")\r\n      );\r\n  }\r\n);\r\n"]}
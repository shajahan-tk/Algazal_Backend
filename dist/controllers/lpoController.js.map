{"version":3,"file":"lpoController.js","sourceRoot":"","sources":["../../src/controllers/lpoController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { LPO } from \"../models/lpoModel\";\r\nimport { Project } from \"../models/projectModel\";\r\nimport {\r\n  handleMultipleFileUploads,\r\n  deleteFileFromS3,\r\n} from \"../utils/uploadConf\";\r\nimport { generateRelatedDocumentNumber } from \"../utils/documentNumbers\";\r\n\r\nexport const createLPO = asyncHandler(async (req: Request, res: Response) => {\r\n  const { projectId, lpoDate, supplier, lpoNumber } = req.body;\r\n  const files = req.files as Express.Multer.File[];\r\n\r\n  // Parse and validate items\r\n  let items = [];\r\n  try {\r\n    items = JSON.parse(req.body.items);\r\n    if (!Array.isArray(items)) {\r\n      throw new Error(\"Items must be an array\");\r\n    }\r\n  } catch (err) {\r\n    throw new ApiError(400, \"Invalid items format - must be valid JSON array\");\r\n  }\r\n\r\n  // Validate required fields\r\n  if (!projectId || !lpoDate || !supplier || items.length === 0) {\r\n    throw new ApiError(400, \"All required fields must be provided\");\r\n  }\r\n\r\n  // Validate project exists and has approved quotation\r\n  const project = await Project.findById(projectId);\r\n  if (!project) throw new ApiError(404, \"Project not found\");\r\n  if (project.status !== \"quotation_sent\") {\r\n    throw new ApiError(400, \"Project must have an quotation_sent\");\r\n  }\r\n\r\n  // Process uploaded documents\r\n  if (!files || files.length === 0) {\r\n    throw new ApiError(400, \"At least one LPO document is required\");\r\n  }\r\n\r\n  const uploadResult = await handleMultipleFileUploads(files);\r\n  if (!uploadResult.success || !uploadResult.uploadData) {\r\n    throw new ApiError(500, \"Failed to upload LPO documents\");\r\n  }\r\n\r\n  const documents = uploadResult.uploadData.map((upload, index) => ({\r\n    url: upload.url,\r\n    key: upload.key,\r\n    name: files[index].originalname,\r\n    mimetype: files[index].mimetype,\r\n    size: files[index].size,\r\n  }));\r\n\r\n  // Process and validate items\r\n  const processedItems = items.map((item: any) => {\r\n    if (!item.description || !item.quantity || !item.unitPrice) {\r\n      throw new ApiError(400, \"All item fields are required\");\r\n    }\r\n    return {\r\n      description: item.description,\r\n      quantity: Number(item.quantity),\r\n      unitPrice: Number(item.unitPrice),\r\n      totalPrice: Number(item.quantity) * Number(item.unitPrice),\r\n    };\r\n  });\r\n\r\n  // Create LPO\r\n  const lpo = await LPO.create({\r\n    project: projectId,\r\n    lpoNumber: lpoNumber,\r\n    lpoDate: new Date(lpoDate),\r\n    supplier,\r\n    items: processedItems,\r\n    documents,\r\n    totalAmount: processedItems.reduce(\r\n      (sum: any, item: any) => sum + item.totalPrice,\r\n      0\r\n    ),\r\n    createdBy: req.user?.userId,\r\n  });\r\n\r\n  await Project.findByIdAndUpdate(projectId, { status: \"lpo_received\" });\r\n\r\n  res.status(201).json(new ApiResponse(201, lpo, \"LPO created successfully\"));\r\n});\r\n// export const getLPOsByProject = asyncHandler(\r\n//   async (req: Request, res: Response) => {\r\n//     const { projectId } = req.params;\r\n\r\n//     const lpos = await LPO.find({ project: projectId })\r\n//       .populate(\"createdBy\", \"firstName lastName\")\r\n//       .sort({ lpoDate: -1 });\r\n\r\n//     res\r\n//       .status(200)\r\n//       .json(new ApiResponse(200, lpos, \"LPOs retrieved successfully\"));\r\n//   }\r\n// );\r\n\r\nexport const getLPODetails = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const lpo = await LPO.findById(id)\r\n      .populate(\"project\", \"projectName client\")\r\n      .populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n    if (!lpo) {\r\n      throw new ApiError(404, \"LPO not found\");\r\n    }\r\n\r\n    res.status(200).json(new ApiResponse(200, lpo, \"LPO details retrieved\"));\r\n  }\r\n);\r\n\r\nexport const deleteLPO = asyncHandler(async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const lpo = await LPO.findById(id);\r\n  if (!lpo) throw new ApiError(404, \"LPO not found\");\r\n\r\n  // Check if LPO can be deleted\r\n  const project = await Project.findById(lpo.project);\r\n  if (project && project.status !== \"lpo_received\") {\r\n    throw new ApiError(400, \"Cannot delete LPO after project has progressed\");\r\n  }\r\n\r\n  // Delete associated files from S3\r\n  await Promise.all(\r\n    lpo.documents.map(async (doc) => {\r\n      try {\r\n        await deleteFileFromS3(doc.key);\r\n      } catch (err) {\r\n        console.error(`Failed to delete file ${doc.key}:`, err);\r\n      }\r\n    })\r\n  );\r\n\r\n  await LPO.findByIdAndDelete(id);\r\n\r\n  // Revert project status if needed\r\n  if (project) {\r\n    await Project.findByIdAndUpdate(lpo.project, {\r\n      status: \"quotation_approved\",\r\n    });\r\n  }\r\n\r\n  res.status(200).json(new ApiResponse(200, null, \"LPO deleted successfully\"));\r\n});\r\n\r\n// Add this new controller method\r\nexport const getLPOsByProject = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { projectId } = req.params;\r\n\r\n    // Validate project exists\r\n    const project = await Project.findById(projectId);\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project not found\");\r\n    }\r\n\r\n    const lpo = await LPO.findOne({ project: projectId })\r\n      .populate(\"createdBy\", \"firstName lastName email\")\r\n      .sort({ lpoDate: -1, createdAt: -1 });\r\n    console.log(lpo);\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, lpo, \"LPOs retrieved successfully\"));\r\n  }\r\n);\r\n\r\nexport const updateLPO = asyncHandler(async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n    const { projectId, lpoDate, supplier, lpoNumber, existingDocuments } = req.body;\r\n    const files = req.files as Express.Multer.File[];\r\n\r\n    // Parse and validate items\r\n    let items = [];\r\n    try {\r\n        items = JSON.parse(req.body.items);\r\n        if (!Array.isArray(items)) {\r\n            throw new Error(\"Items must be an array\");\r\n        }\r\n    } catch (err) {\r\n        throw new ApiError(400, \"Invalid items format - must be valid JSON array\");\r\n    }\r\n\r\n    // Validate required fields\r\n    if (!projectId || !lpoDate || !supplier || items.length === 0) {\r\n        throw new ApiError(400, \"All required fields must be provided\");\r\n    }\r\n\r\n    // Check if LPO exists\r\n    const existingLPO = await LPO.findById(id);\r\n    if (!existingLPO) {\r\n        throw new ApiError(404, \"LPO not found\");\r\n    }\r\n\r\n    // Process uploaded documents\r\n    let newDocuments: any[] = [];\r\n    if (files && files.length > 0) {\r\n        const uploadResult = await handleMultipleFileUploads(files);\r\n        if (!uploadResult.success || !uploadResult.uploadData) {\r\n            throw new ApiError(500, \"Failed to upload LPO documents\");\r\n        }\r\n\r\n        newDocuments = uploadResult.uploadData.map((upload, index) => ({\r\n            url: upload.url,\r\n            key: upload.key,\r\n            name: files[index].originalname,\r\n            mimetype: files[index].mimetype,\r\n            size: files[index].size,\r\n        }));\r\n    }\r\n\r\n    // Process existing documents\r\n    let finalExistingDocuments: any[] = [];\r\n    if (existingDocuments) {\r\n        try {\r\n            finalExistingDocuments = JSON.parse(existingDocuments);\r\n        } catch (err) {\r\n            throw new ApiError(400, \"Invalid existing documents format\");\r\n        }\r\n    }\r\n\r\n    // Process and validate items\r\n    const processedItems = items.map((item: any) => {\r\n        if (!item.description || !item.quantity || !item.unitPrice) {\r\n            throw new ApiError(400, \"All item fields are required\");\r\n        }\r\n        return {\r\n            description: item.description,\r\n            quantity: Number(item.quantity),\r\n            unitPrice: Number(item.unitPrice),\r\n            totalPrice: Number(item.quantity) * Number(item.unitPrice),\r\n        };\r\n    });\r\n\r\n    // Delete removed documents from S3\r\n    const documentsToDelete = existingLPO.documents.filter(\r\n        (doc: any) => !finalExistingDocuments.some((ed: any) => ed.key === doc.key)\r\n    );\r\n\r\n    await Promise.all(\r\n        documentsToDelete.map(async (doc: any) => {\r\n            try {\r\n                await deleteFileFromS3(doc.key);\r\n            } catch (err) {\r\n                console.error(`Failed to delete file ${doc.key}:`, err);\r\n            }\r\n        })\r\n    );\r\n\r\n    // Update LPO\r\n    const updatedLPO = await LPO.findByIdAndUpdate(\r\n        id,\r\n        {\r\n            lpoNumber,\r\n            lpoDate: new Date(lpoDate),\r\n            supplier,\r\n            items: processedItems,\r\n            documents: [...finalExistingDocuments, ...newDocuments],\r\n            totalAmount: processedItems.reduce(\r\n                (sum: any, item: any) => sum + item.totalPrice,\r\n                0\r\n            ),\r\n        },\r\n        { new: true, runValidators: true }\r\n    );\r\n\r\n    res.status(200).json(new ApiResponse(200, updatedLPO, \"LPO updated successfully\"));\r\n});"]}
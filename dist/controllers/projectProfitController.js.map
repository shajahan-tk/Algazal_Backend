{"version":3,"file":"projectProfitController.js","sourceRoot":"","sources":["../../src/controllers/projectProfitController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { ProjectProfit } from \"../models/projectProfitModel\";\r\nimport {\r\n  handleMultipleFileUploads,\r\n  deleteFileFromS3,\r\n  getS3KeyFromUrl,\r\n} from \"../utils/uploadConf\";\r\nimport ExcelJS from \"exceljs\";\r\nimport { IUser } from \"../models/userModel\";\r\nexport const createProjectProfit = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { projectName, poNumber, startDate, budget, expenses, description } = req.body;\r\n\r\n    if (!projectName || !poNumber || !startDate || budget === undefined) {\r\n      throw new ApiError(400, \"Required fields are missing\");\r\n    }\r\n\r\n    let attachments: Array<{ fileName: string; fileType: string; filePath: string }> = [];\r\n    const files = Array.isArray(req.files) ? req.files : req.files ? Object.values(req.files).flat() : [];\r\n\r\n    if (files.length > 0) {\r\n      const uploadResults = await handleMultipleFileUploads(files);\r\n      if (!uploadResults.success) {\r\n        throw new ApiError(500, \"Failed to upload attachments\");\r\n      }\r\n      attachments = uploadResults.uploadData?.map((file) => ({\r\n        fileName: file.key.split(\"/\").pop() || \"attachment\",\r\n        fileType: file.mimetype,\r\n        filePath: file.url,\r\n      })) || [];\r\n    }\r\n\r\n    const projectProfit = await ProjectProfit.create({\r\n      projectName,\r\n      poNumber,\r\n      startDate: new Date(startDate),\r\n      budget,\r\n      expenses: expenses || 0,\r\n      description,\r\n      attachments,\r\n      createdBy: req.user?.userId,\r\n    });\r\n\r\n    res.status(201).json(\r\n      new ApiResponse(201, projectProfit, \"Project profit record created successfully\")\r\n    );\r\n  }\r\n);\r\n\r\n\r\nexport const getProjectProfits = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { \r\n      search, \r\n      month, \r\n      year, \r\n      startDate, \r\n      endDate, \r\n      minProfit, \r\n      maxProfit, \r\n      page = 1, \r\n      limit = 10 \r\n    } = req.query;\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n\r\n    const filter: any = {};\r\n\r\n    // Search filter\r\n    if (search) {\r\n      const searchRegex = new RegExp(search as string, \"i\");\r\n      filter.$or = [\r\n        { projectName: searchRegex },\r\n        { poNumber: searchRegex },\r\n        { description: searchRegex },\r\n      ];\r\n    }\r\n\r\n    // Date range filter (takes precedence over year/month)\r\n    if (startDate && endDate) {\r\n      filter.startDate = {\r\n        $gte: new Date(startDate as string),\r\n        $lte: new Date(endDate as string),\r\n      };\r\n    } else {\r\n      // Year filter\r\n      if (year) {\r\n        const yearNum = parseInt(year as string);\r\n        if (isNaN(yearNum)) {\r\n          throw new ApiError(400, \"Invalid year value\");\r\n        }\r\n        filter.startDate = {\r\n          $gte: new Date(yearNum, 0, 1),\r\n          $lte: new Date(yearNum + 1, 0, 1),\r\n        };\r\n      }\r\n\r\n      // Month filter (works with year filter)\r\n      if (month) {\r\n        const monthNum = parseInt(month as string);\r\n        if (isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n          throw new ApiError(400, \"Invalid month value (1-12)\");\r\n        }\r\n\r\n        if (!filter.startDate) {\r\n          // If no year specified, use current year\r\n          const currentYear = new Date().getFullYear();\r\n          filter.startDate = {\r\n            $gte: new Date(currentYear, monthNum - 1, 1),\r\n            $lt: new Date(currentYear, monthNum, 1),\r\n          };\r\n        } else {\r\n          // Adjust existing year filter to specific month\r\n          const startDate = new Date(filter.startDate.$gte);\r\n          startDate.setMonth(monthNum - 1);\r\n          startDate.setDate(1);\r\n\r\n          const endDate = new Date(startDate);\r\n          endDate.setMonth(monthNum);\r\n\r\n          filter.startDate.$gte = startDate;\r\n          filter.startDate.$lte = endDate;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Profit range filter\r\n    if (minProfit || maxProfit) {\r\n      filter.profit = {};\r\n      if (minProfit) {\r\n        filter.profit.$gte = parseFloat(minProfit as string);\r\n      }\r\n      if (maxProfit) {\r\n        filter.profit.$lte = parseFloat(maxProfit as string);\r\n      }\r\n    }\r\n\r\n    const total = await ProjectProfit.countDocuments(filter);\r\n    const totals = await ProjectProfit.aggregate([\r\n      { $match: filter },\r\n      {\r\n        $group: {\r\n          _id: null,\r\n          totalBudget: { $sum: \"$budget\" },\r\n          totalExpenses: { $sum: \"$expenses\" },\r\n          totalProfit: { $sum: \"$profit\" },\r\n        },\r\n      },\r\n    ]);\r\n\r\n    const projects = await ProjectProfit.find(filter)\r\n      .skip(skip)\r\n      .limit(Number(limit))\r\n      .sort({ startDate: -1 })\r\n      .populate(\"createdBy\", \"firstName lastName\");\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          projects,\r\n          totals: totals[0] || { totalBudget: 0, totalExpenses: 0, totalProfit: 0 },\r\n          pagination: {\r\n            total,\r\n            page: Number(page),\r\n            limit: Number(limit),\r\n            totalPages: Math.ceil(total / Number(limit)),\r\n            hasNextPage: Number(page) * Number(limit) < total,\r\n            hasPreviousPage: Number(page) > 1,\r\n          },\r\n        },\r\n        \"Project profits retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const getProjectProfit = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const project = await ProjectProfit.findById(id).populate(\r\n      \"createdBy\",\r\n      \"firstName lastName\"\r\n    );\r\n\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project profit record not found\");\r\n    }\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        project,\r\n        \"Project profit retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const updateProjectProfit = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n    const updateData = req.body;\r\n\r\n    const project = await ProjectProfit.findById(id);\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project profit record not found\");\r\n    }\r\n\r\n    // Handle file uploads for new attachments\r\n    let newAttachments: Array<{\r\n      fileName: string;\r\n      fileType: string;\r\n      filePath: string;\r\n    }> = [];\r\n\r\n    const files = Array.isArray(req.files)\r\n      ? req.files\r\n      : req.files\r\n      ? Object.values(req.files).flat()\r\n      : [];\r\n\r\n    if (files.length > 0) {\r\n      const uploadResults = await handleMultipleFileUploads(files);\r\n      if (!uploadResults.success) {\r\n        throw new ApiError(500, \"Failed to upload new attachments\");\r\n      }\r\n      newAttachments =\r\n        uploadResults.uploadData?.map((file) => ({\r\n          fileName: file.key.split(\"/\").pop() || \"attachment\",\r\n          fileType: file.mimetype,\r\n          filePath: file.url,\r\n        })) || [];\r\n    }\r\n\r\n    // Handle attachment deletions if specified\r\n    if (\r\n      updateData.deletedAttachments &&\r\n      updateData.deletedAttachments.length > 0\r\n    ) {\r\n      await Promise.all(\r\n        updateData.deletedAttachments.map(async (attachmentId: string) => {\r\n          const attachment = project.attachments.id(attachmentId);\r\n          if (attachment) {\r\n            try {\r\n              const key = getS3KeyFromUrl(attachment.filePath);\r\n              await deleteFileFromS3(key);\r\n              project.attachments.pull(attachmentId);\r\n            } catch (error) {\r\n              console.error(\r\n                `Failed to delete file from S3: ${attachment.filePath}`,\r\n                error\r\n              );\r\n            }\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    // Prepare update payload\r\n    const updatePayload: any = {\r\n      ...updateData,\r\n      $push: { attachments: { $each: newAttachments } },\r\n    };\r\n\r\n    // Convert dates if they exist in updateData\r\n    if (updateData.startDate) {\r\n      updatePayload.startDate = new Date(updateData.startDate);\r\n    }\r\n\r\n    // Update the project\r\n    const updatedProject = await ProjectProfit.findByIdAndUpdate(\r\n      id,\r\n      updatePayload,\r\n      {\r\n        new: true,\r\n      }\r\n    ).populate(\"createdBy\", \"firstName lastName\");\r\n\r\n    if (!updatedProject) {\r\n      throw new ApiError(500, \"Failed to update project profit record\");\r\n    }\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        updatedProject,\r\n        \"Project profit updated successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const deleteProjectProfit = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const project = await ProjectProfit.findById(id);\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project profit record not found\");\r\n    }\r\n\r\n    // Delete all associated files from S3\r\n    if (project.attachments && project.attachments.length > 0) {\r\n      await Promise.all(\r\n        project.attachments.map(async (attachment) => {\r\n          try {\r\n            const key = getS3KeyFromUrl(attachment.filePath);\r\n            await deleteFileFromS3(key);\r\n          } catch (error) {\r\n            console.error(\r\n              `Failed to delete file from S3: ${attachment.filePath}`,\r\n              error\r\n            );\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    await ProjectProfit.findByIdAndDelete(id);\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        null,\r\n        \"Project profit record deleted successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const getProfitSummary = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { groupBy } = req.query;\r\n\r\n    let groupStage: any;\r\n    switch (groupBy) {\r\n      case \"month\":\r\n        groupStage = {\r\n          $group: {\r\n            _id: {\r\n              year: { $year: \"$startDate\" },\r\n              month: { $month: \"$startDate\" },\r\n            },\r\n            totalBudget: { $sum: \"$budget\" },\r\n            totalExpenses: { $sum: \"$expenses\" },\r\n            totalProfit: { $sum: \"$profit\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n        break;\r\n      case \"year\":\r\n        groupStage = {\r\n          $group: {\r\n            _id: {\r\n              year: { $year: \"$startDate\" },\r\n            },\r\n            totalBudget: { $sum: \"$budget\" },\r\n            totalExpenses: { $sum: \"$expenses\" },\r\n            totalProfit: { $sum: \"$profit\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n        break;\r\n      default:\r\n        groupStage = {\r\n          $group: {\r\n            _id: null,\r\n            totalBudget: { $sum: \"$budget\" },\r\n            totalExpenses: { $sum: \"$expenses\" },\r\n            totalProfit: { $sum: \"$profit\" },\r\n            count: { $sum: 1 },\r\n          },\r\n        };\r\n    }\r\n\r\n    const summary = await ProjectProfit.aggregate([\r\n      groupStage,\r\n      { $sort: { _id: 1 } },\r\n    ]);\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        summary,\r\n        \"Profit summary retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const exportProjectProfitsToExcel = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { search, month, year, minProfit, maxProfit } = req.query;\r\n    \r\n    const filter: any = {};\r\n\r\n    // Search filter\r\n    if (search) {\r\n      const searchRegex = new RegExp(search as string, \"i\");\r\n      filter.$or = [\r\n        { projectName: searchRegex },\r\n        { poNumber: searchRegex },\r\n        { description: searchRegex },\r\n      ];\r\n    }\r\n\r\n    // Date range filter - Fixed implementation\r\n    if (month && year) {\r\n      // Both month and year provided\r\n      const monthNum = parseInt(month as string);\r\n      const yearNum = parseInt(year as string);\r\n      \r\n      if (isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n        throw new ApiError(400, \"Invalid month value (1-12)\");\r\n      }\r\n      if (isNaN(yearNum)) {\r\n        throw new ApiError(400, \"Invalid year value\");\r\n      }\r\n\r\n      // Create start and end dates for the specific month\r\n      const startDate = new Date(yearNum, monthNum - 1, 1); // First day of month\r\n      const endDate = new Date(yearNum, monthNum, 0); // Last day of month\r\n      \r\n      filter.startDate = {\r\n        $gte: startDate,\r\n        $lte: endDate\r\n      };\r\n    } else if (year && !month) {\r\n      // Only year provided\r\n      const yearNum = parseInt(year as string);\r\n      if (isNaN(yearNum)) {\r\n        throw new ApiError(400, \"Invalid year value\");\r\n      }\r\n\r\n      const startDate = new Date(yearNum, 0, 1); // January 1st of the year\r\n      const endDate = new Date(yearNum, 11, 31); // December 31st of the year\r\n      \r\n      filter.startDate = {\r\n        $gte: startDate,\r\n        $lte: endDate\r\n      };\r\n    } else if (month && !year) {\r\n      // Only month provided, use current year\r\n      const monthNum = parseInt(month as string);\r\n      const currentYear = new Date().getFullYear();\r\n      \r\n      if (isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n        throw new ApiError(400, \"Invalid month value (1-12)\");\r\n      }\r\n\r\n      const startDate = new Date(currentYear, monthNum - 1, 1);\r\n      const endDate = new Date(currentYear, monthNum, 0);\r\n      \r\n      filter.startDate = {\r\n        $gte: startDate,\r\n        $lte: endDate\r\n      };\r\n    }\r\n\r\n    // Profit range filter\r\n    if (minProfit || maxProfit) {\r\n      filter.profit = {};\r\n      if (minProfit) {\r\n        const min = parseFloat(minProfit as string);\r\n        if (!isNaN(min)) filter.profit.$gte = min;\r\n      }\r\n      if (maxProfit) {\r\n        const max = parseFloat(maxProfit as string);\r\n        if (!isNaN(max)) filter.profit.$lte = max;\r\n      }\r\n    }\r\n\r\n    // Get projects with populated createdBy\r\n    const projects = await ProjectProfit.find(filter)\r\n      .sort({ startDate: -1 })\r\n      .populate<{ createdBy: IUser }>(\"createdBy\", \"firstName lastName\");\r\n\r\n    // Create Excel workbook\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(\"Project Profits\");\r\n\r\n    // Define columns with SNO and all required fields\r\n    worksheet.columns = [\r\n      { header: \"SNO\", key: \"sno\", width: 5 },\r\n      { header: \"DATE\", key: \"startDate\", width: 12, style: { numFmt: \"dd-mm-yyyy\" }},\r\n      { header: \"PROJECT NAME\", key: \"projectName\", width: 25 },\r\n      { header: \"PO NUMBER\", key: \"poNumber\", width: 15 },\r\n      { header: \"BUDGET\", key: \"budget\", width: 12, style: { numFmt: \"#,##0.00\" }},\r\n      { header: \"EXPENSES\", key: \"expenses\", width: 12, style: { numFmt: \"#,##0.00\" }},\r\n      { header: \"PROFIT\", key: \"profit\", width: 12, style: { numFmt: \"#,##0.00\" }},\r\n      { header: \"REMARKS\", key: \"description\", width: 30 },\r\n    ];\r\n\r\n    // Add data rows with SNO\r\n    projects.forEach((project, index) => {\r\n      worksheet.addRow({\r\n        sno: index + 1,\r\n        startDate: project.startDate,\r\n        projectName: project.projectName,\r\n        poNumber: project.poNumber,\r\n        budget: project.budget,\r\n        expenses: project.expenses,\r\n        profit: project.profit,\r\n        description: project.description || \"\",\r\n      });\r\n    });\r\n\r\n    // Style header row\r\n    worksheet.getRow(1).eachCell((cell) => {\r\n      cell.font = { bold: true };\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFD3D3D3\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n\r\n    // Freeze the header row\r\n    worksheet.views = [{ state: \"frozen\", ySplit: 1 }];\r\n\r\n    // Add totals row\r\n    const totals = await ProjectProfit.aggregate([\r\n      { $match: filter },\r\n      {\r\n        $group: {\r\n          _id: null,\r\n          totalBudget: { $sum: \"$budget\" },\r\n          totalExpenses: { $sum: \"$expenses\" },\r\n          totalProfit: { $sum: \"$profit\" },\r\n        },\r\n      },\r\n    ]);\r\n\r\n    if (totals.length > 0) {\r\n      worksheet.addRow([]); // Empty row before totals\r\n      const totalRow = worksheet.addRow({\r\n        sno: \"\", // Empty for totals row\r\n        projectName: \"TOTALS\",\r\n        budget: totals[0].totalBudget,\r\n        expenses: totals[0].totalExpenses,\r\n        profit: totals[0].totalProfit,\r\n      });\r\n      \r\n      // Style totals row\r\n      totalRow.eachCell((cell) => {\r\n        cell.font = { bold: true };\r\n        cell.fill = {\r\n          type: \"pattern\",\r\n          pattern: \"solid\",\r\n          fgColor: { argb: \"FFF2F2F2\" },\r\n        };\r\n      });\r\n    }\r\n\r\n    // Set response headers\r\n    res.setHeader(\r\n      \"Content-Type\",\r\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n    );\r\n    res.setHeader(\r\n      \"Content-Disposition\",\r\n      `attachment; filename=project_profits_${new Date().toISOString().split(\"T\")[0]}.xlsx`\r\n    );\r\n\r\n    // Send Excel file\r\n    await workbook.xlsx.write(res);\r\n    res.end();\r\n  }\r\n);"]}
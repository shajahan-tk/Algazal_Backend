{"version":3,"file":"payrollController.js","sourceRoot":"","sources":["../../src/controllers/payrollController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Payroll } from \"../models/payrollModel\";\r\nimport { IUser, User } from \"../models/userModel\";\r\nimport { EmployeeExpense } from \"../models/employeeExpenseModel\";\r\nimport { Attendance } from \"../models/attendanceModel\";\r\nimport ExcelJS from \"exceljs\";\r\nimport { Types } from \"mongoose\";\r\n\r\n// Helper function to calculate overtime for a period\r\nexport const calculateOvertime = async (userId: Types.ObjectId, period: string) => {\r\n  try {\r\n    // Extract month and year from period (assuming format \"MM-YYYY\")\r\n    const [month, year] = period.split('-').map(Number);\r\n    const startDate = new Date(year, month - 1, 1);\r\n    const endDate = new Date(year, month, 0); // Last day of month\r\n    \r\n    const attendances = await Attendance.find({\r\n      user: userId,\r\n      date: { $gte: startDate, $lte: endDate },\r\n      present: true\r\n    });\r\n    \r\n    return attendances.reduce((total, attendance) => {\r\n      return total + (attendance.overtimeHours || 0);\r\n    }, 0);\r\n  } catch (error) {\r\n    console.error(\"Error calculating overtime:\", error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Create payroll record\r\nexport const createPayroll = asyncHandler(async (req: Request, res: Response) => {\r\n  let {\r\n    employee,\r\n    labourCard,\r\n    labourCardPersonalNo,\r\n    period,\r\n    allowance,\r\n    deduction,\r\n    mess,\r\n    advance,\r\n    remark\r\n  } = req.body;\r\n\r\n  // Convert to numbers safely\r\n  allowance = Number(allowance) || 0;\r\n  deduction = Number(deduction) || 0;\r\n  mess = Number(mess) || 0;\r\n  advance = Number(advance) || 0;\r\n\r\n  // Validate required fields\r\n  if (!employee || !labourCard || !labourCardPersonalNo || !period) {\r\n    throw new ApiError(400, \"Required fields are missing\");\r\n  }\r\n\r\n  // Check if employee exists\r\n  const employeeExists = await User.findById(employee);\r\n  if (!employeeExists) {\r\n    throw new ApiError(404, \"Employee not found\");\r\n  }\r\n\r\n  // Check for existing payroll for same employee and period\r\n  const existingPayroll = await Payroll.findOne({ employee, period });\r\n  if (existingPayroll) {\r\n    throw new ApiError(400, \"Payroll already exists for this employee and period\");\r\n  }\r\n\r\n  // Get basic salary\r\n  const employeeExpense = await EmployeeExpense.findOne({ employee });\r\n  const basicSalary = Number(employeeExpense?.basicSalary) || 0;\r\n\r\n  // Calculate overtime\r\n  const overtime = await calculateOvertime(employee, period);\r\n\r\n  // Totals\r\n  const totalEarnings = basicSalary + allowance + overtime;\r\n  const net = totalEarnings - deduction - mess - advance;\r\n\r\n  const payroll = await Payroll.create({\r\n    employee,\r\n    labourCard,\r\n    labourCardPersonalNo,\r\n    period,\r\n    allowance,\r\n    deduction,\r\n    mess,\r\n    advance,\r\n    net,\r\n    remark,\r\n    createdBy: req.user?.userId\r\n  });\r\n\r\n  res.status(201).json(\r\n    new ApiResponse(201, payroll, \"Payroll created successfully\")\r\n  );\r\n});\r\n\r\n\r\n// Get all payroll records with comprehensive data\r\nexport const getPayrolls = asyncHandler(async (req: Request, res: Response) => {\r\n  const { \r\n    employee, \r\n    period, \r\n    labourCard, \r\n    labourCardPersonalNo,\r\n    startDate,\r\n    endDate,\r\n    month,\r\n    year,\r\n    page = 1, \r\n    limit = 10 \r\n  } = req.query;\r\n\r\n  const skip = (Number(page) - 1) * Number(limit);\r\n  \r\n  // Define proper filter type\r\n  interface PayrollFilter {\r\n    employee?: Types.ObjectId | string;\r\n    period?: string;\r\n    labourCard?: string;\r\n    labourCardPersonalNo?: string;\r\n    createdAt?: {\r\n      $gte?: Date;\r\n      $lte?: Date;\r\n    };\r\n  }\r\n\r\n  const filter: PayrollFilter = {};\r\n\r\n  // Basic filters\r\n  if (employee) filter.employee = new Types.ObjectId(employee as string);\r\n  if (period) filter.period = period as string;\r\n  if (labourCard) filter.labourCard = labourCard as string;\r\n  if (labourCardPersonalNo) filter.labourCardPersonalNo = labourCardPersonalNo as string;\r\n\r\n  // Date range filter (takes precedence over year/month)\r\n  if (startDate && endDate) {\r\n    filter.createdAt = {\r\n      $gte: new Date(startDate as string),\r\n      $lte: new Date(endDate as string),\r\n    };\r\n  } else {\r\n    // Initialize date filter if not exists\r\n    if (!filter.createdAt) filter.createdAt = {};\r\n\r\n    // Year filter\r\n    if (year) {\r\n      const yearNum = parseInt(year as string);\r\n      if (isNaN(yearNum)) {\r\n        throw new ApiError(400, \"Invalid year value\");\r\n      }\r\n      filter.createdAt.$gte = new Date(yearNum, 0, 1);\r\n      filter.createdAt.$lte = new Date(yearNum + 1, 0, 1);\r\n    }\r\n\r\n    // Month filter (works with year filter)\r\n    if (month) {\r\n      const monthNum = parseInt(month as string);\r\n      if (isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n        throw new ApiError(400, \"Invalid month value (1-12)\");\r\n      }\r\n\r\n      if (!filter.createdAt.$gte) {\r\n        // If no year specified, use current year\r\n        const currentYear = new Date().getFullYear();\r\n        filter.createdAt.$gte = new Date(currentYear, monthNum - 1, 1);\r\n        filter.createdAt.$lte = new Date(currentYear, monthNum, 1);\r\n      } else {\r\n        // Adjust existing year filter to specific month\r\n        const start = new Date(filter.createdAt.$gte);\r\n        start.setMonth(monthNum - 1);\r\n        start.setDate(1);\r\n\r\n        const end = new Date(start);\r\n        end.setMonth(monthNum);\r\n\r\n        filter.createdAt.$gte = start;\r\n        filter.createdAt.$lte = end;\r\n      }\r\n    }\r\n  }\r\n\r\n  const total = await Payroll.countDocuments(filter);\r\n\r\n  // Get base payroll records with proper typing for populated fields\r\n  const payrolls = await Payroll.find(filter)\r\n    .skip(skip)\r\n    .limit(Number(limit))\r\n    .sort({ period: -1, createdAt: -1 })\r\n    .populate<{ employee: IUser }>({\r\n      path: 'employee',\r\n      select: 'firstName lastName role emiratesId'\r\n    })\r\n    .populate<{ createdBy: IUser }>({\r\n      path: 'createdBy',\r\n      select: 'firstName lastName'\r\n    });\r\n\r\n  // Enhance with data from other models\r\n  const enhancedPayrolls = await Promise.all(\r\n    payrolls.map(async (payroll) => {\r\n      // Ensure employee is populated and has the expected properties\r\n      if (!payroll.employee || typeof payroll.employee !== 'object') {\r\n        throw new Error('Employee data not properly populated');\r\n      }\r\n\r\n      const employeeExpense = await EmployeeExpense.findOne({ \r\n        employee: payroll.employee._id \r\n      }).lean();\r\n\r\n      const overtime = await calculateOvertime(\r\n        payroll.employee._id, \r\n        payroll.period as string\r\n      );\r\n\r\n      return {\r\n        _id: payroll._id,\r\n        name: `${payroll.employee.firstName} ${payroll.employee.lastName}`,\r\n        designation: payroll.employee.role,\r\n        emiratesId: payroll.employee.emiratesId || 'N/A',\r\n        labourCard: payroll.labourCard,\r\n        labourCardPersonalNo: payroll.labourCardPersonalNo,\r\n        period: payroll.period,\r\n        basic: employeeExpense?.basicSalary || 0,\r\n        allowance: payroll.allowance,\r\n        ot: overtime,\r\n        totalEarning: (employeeExpense?.basicSalary || 0) + payroll.allowance + overtime,\r\n        deduction: payroll.deduction,\r\n        mess: payroll.mess,\r\n        advance: payroll.advance,\r\n        net: payroll.net,\r\n        remark: payroll.remark,\r\n        createdBy: payroll.createdBy \r\n          ? `${payroll.createdBy.firstName} ${payroll.createdBy.lastName}`\r\n          : 'System',\r\n        createdAt: payroll.createdAt\r\n      };\r\n    })\r\n  );\r\n\r\n  res.status(200).json(\r\n    new ApiResponse(\r\n      200,\r\n      {\r\n        payrolls: enhancedPayrolls,\r\n        pagination: {\r\n          total,\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          totalPages: Math.ceil(total / Number(limit)),\r\n          hasNextPage: Number(page) * Number(limit) < total,\r\n          hasPreviousPage: Number(page) > 1,\r\n        },\r\n      },\r\n      \"Payrolls retrieved successfully\"\r\n    )\r\n  );\r\n});\r\n\r\n// Get single payroll record\r\nexport const getPayroll = asyncHandler(async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const payroll = await Payroll.findById(id)\r\n    .populate<{ employee: IUser }>({\r\n      path: 'employee',\r\n      select: 'firstName lastName role emiratesId'\r\n    })\r\n    .populate<{ createdBy: IUser }>({\r\n      path: 'createdBy',\r\n      select: 'firstName lastName'\r\n    });\r\n\r\n  if (!payroll) {\r\n    throw new ApiError(404, \"Payroll not found\");\r\n  }\r\n\r\n  // Type guard to ensure employee is properly populated\r\n  if (!payroll.employee || typeof payroll.employee !== 'object' || !('firstName' in payroll.employee)) {\r\n    throw new ApiError(500, \"Employee data not properly populated\");\r\n  }\r\n\r\n  // Enhance with additional data\r\n  const employeeExpense = await EmployeeExpense.findOne({ \r\n    employee: payroll.employee._id \r\n  }).lean();\r\n\r\n  const overtime = await calculateOvertime(\r\n    payroll.employee._id, \r\n    payroll.period as string\r\n  );\r\n\r\n  const enhancedPayroll = {\r\n    ...payroll.toObject(),\r\n    name: `${payroll.employee.firstName} ${payroll.employee.lastName}`,\r\n    designation: payroll.employee.role,\r\n    emiratesId: payroll.employee.emiratesId || 'N/A',\r\n    basic: employeeExpense?.basicSalary || 0,\r\n    ot: overtime,\r\n    totalEarning: (employeeExpense?.basicSalary || 0) + payroll.allowance + overtime,\r\n    createdByName: payroll.createdBy \r\n      ? `${payroll.createdBy.firstName} ${payroll.createdBy.lastName}`\r\n      : 'System'\r\n  };\r\n\r\n  res.status(200).json(\r\n    new ApiResponse(200, enhancedPayroll, \"Payroll retrieved successfully\")\r\n  );\r\n});\r\n\r\n// Update payroll record\r\nexport const updatePayroll = asyncHandler(async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n  const updateData = req.body;\r\n\r\n  const payroll = await Payroll.findById(id);\r\n  if (!payroll) {\r\n    throw new ApiError(404, \"Payroll not found\");\r\n  }\r\n\r\n  // Check for duplicate payroll if employee/period is updated\r\n  if (updateData.employee || updateData.period) {\r\n    const employeeId = updateData.employee || payroll.employee;\r\n    const period = updateData.period || payroll.period;\r\n\r\n    const existingPayroll = await Payroll.findOne({\r\n      _id: { $ne: id },\r\n      employee: employeeId,\r\n      period\r\n    });\r\n\r\n    if (existingPayroll) {\r\n      throw new ApiError(400, \"Payroll already exists for this employee and period\");\r\n    }\r\n  }\r\n\r\n  // --- Cast incoming financial fields to numbers ---\r\n  if (updateData.allowance !== undefined) updateData.allowance = Number(updateData.allowance) || 0;\r\n  if (updateData.deduction !== undefined) updateData.deduction = Number(updateData.deduction) || 0;\r\n  if (updateData.mess !== undefined) updateData.mess = Number(updateData.mess) || 0;\r\n  if (updateData.advance !== undefined) updateData.advance = Number(updateData.advance) || 0;\r\n\r\n  // Recalculate net if financial fields changed\r\n  if (\r\n    updateData.allowance !== undefined || \r\n    updateData.deduction !== undefined || \r\n    updateData.mess !== undefined || \r\n    updateData.advance !== undefined\r\n  ) {\r\n    const employeeExpense = await EmployeeExpense.findOne({ \r\n      employee: updateData.employee || payroll.employee \r\n    });\r\n\r\n    const basicSalary = Number(employeeExpense?.basicSalary) || 0;\r\n    const allowance = updateData.allowance ?? payroll.allowance;\r\n    const deduction = updateData.deduction ?? payroll.deduction;\r\n    const mess = updateData.mess ?? payroll.mess;\r\n    const advance = updateData.advance ?? payroll.advance;\r\n\r\n    const overtime = await calculateOvertime(\r\n      updateData.employee || payroll.employee,\r\n      updateData.period || payroll.period\r\n    );\r\n\r\n    updateData.net = (basicSalary + allowance + overtime) - deduction - mess - advance;\r\n  }\r\n\r\n  const updatedPayroll = await Payroll.findByIdAndUpdate(id, updateData, {\r\n    new: true\r\n  })\r\n    .populate({\r\n      path: \"employee\",\r\n      select: \"firstName lastName role emiratesId\"\r\n    })\r\n    .populate({\r\n      path: \"createdBy\",\r\n      select: \"firstName lastName\"\r\n    });\r\n\r\n  res.status(200).json(\r\n    new ApiResponse(200, updatedPayroll, \"Payroll updated successfully\")\r\n  );\r\n});\r\n\r\n\r\n// Delete payroll record\r\nexport const deletePayroll = asyncHandler(async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const payroll = await Payroll.findByIdAndDelete(id);\r\n\r\n  if (!payroll) {\r\n    throw new ApiError(404, \"Payroll not found\");\r\n  }\r\n\r\n  res.status(200).json(\r\n    new ApiResponse(200, null, \"Payroll deleted successfully\")\r\n  );\r\n});\r\n\r\n// Export payrolls to Excel\r\nexport const exportPayrollsToExcel = asyncHandler(async (req: Request, res: Response) => {\r\n  const filter: Record<string, unknown> = {};\r\n\r\n  // Apply filters with type safety\r\n  if (req.query.period) filter.period = req.query.period as string;\r\n  if (req.query.employee) filter.employee = req.query.employee as string;\r\n  if (req.query.labourCard) filter.labourCard = req.query.labourCard as string;\r\n\r\n  const payrolls = await Payroll.find(filter)\r\n    .sort({ period: -1, createdAt: -1 })\r\n    .populate<{ employee: IUser }>({\r\n      path: 'employee',\r\n      select: 'firstName lastName role emiratesId'\r\n    });\r\n\r\n  // Create workbook and worksheet\r\n  const workbook = new ExcelJS.Workbook();\r\n  const worksheet = workbook.addWorksheet('Payroll Report');\r\n\r\n  // Define columns\r\n  worksheet.columns = [\r\n    { header: 'S/NO', key: 'serialNo', width: 8 },\r\n    { header: 'NAME', key: 'name', width: 25 },\r\n    { header: 'Designation', key: 'designation', width: 20 },\r\n    { header: 'EMIRATES ID', key: 'emiratesId', width: 20 },\r\n    { header: 'LABOUR CARD', key: 'labourCard', width: 20 },\r\n    { header: 'LABOUR CARD PERSONAL NO', key: 'labourCardPersonalNo', width: 25 },\r\n    { header: 'PERIOD', key: 'period', width: 15 },\r\n    { header: 'BASIC', key: 'basic', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'ALLOWANCE', key: 'allowance', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'OT', key: 'ot', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'TOTAL EARNING', key: 'totalEarning', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'DEDUCTION', key: 'deduction', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'MESS', key: 'mess', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'ADVANCE', key: 'advance', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'NET', key: 'net', width: 15, style: { numFmt: '#,##0.00' } },\r\n    { header: 'REMARK', key: 'remark', width: 30 }\r\n  ];\r\n\r\n  // Process payrolls sequentially to avoid potential memory issues with many parallel queries\r\n  for (let i = 0; i < payrolls.length; i++) {\r\n    const payroll = payrolls[i];\r\n    \r\n    // Type guard for populated employee\r\n    if (!payroll.employee || typeof payroll.employee !== 'object' || !('firstName' in payroll.employee)) {\r\n      continue; // Skip this record or handle error as needed\r\n    }\r\n\r\n    const employeeExpense = await EmployeeExpense.findOne({ \r\n      employee: payroll.employee._id \r\n    }).lean();\r\n\r\n    const overtime = await calculateOvertime(\r\n      payroll.employee._id, \r\n      payroll.period as string\r\n    );\r\n\r\n    worksheet.addRow({\r\n      serialNo: i + 1,\r\n      name: `${payroll.employee.firstName} ${payroll.employee.lastName}`,\r\n      designation: payroll.employee.role,\r\n      emiratesId: payroll.employee.emiratesId || 'N/A',\r\n      labourCard: payroll.labourCard,\r\n      labourCardPersonalNo: payroll.labourCardPersonalNo,\r\n      period: payroll.period,\r\n      basic: employeeExpense?.basicSalary || 0,\r\n      allowance: payroll.allowance,\r\n      ot: overtime,\r\n      totalEarning: (employeeExpense?.basicSalary || 0) + payroll.allowance + overtime,\r\n      deduction: payroll.deduction,\r\n      mess: payroll.mess,\r\n      advance: payroll.advance,\r\n      net: payroll.net,\r\n      remark: payroll.remark || ''\r\n    });\r\n  }\r\n\r\n  // Style header row\r\n  worksheet.getRow(1).eachCell((cell) => {\r\n    cell.font = { bold: true };\r\n    cell.fill = {\r\n      type: 'pattern',\r\n      pattern: 'solid',\r\n      fgColor: { argb: 'FFD3D3D3' }\r\n    };\r\n    cell.border = {\r\n      top: { style: 'thin' },\r\n      left: { style: 'thin' },\r\n      bottom: { style: 'thin' },\r\n      right: { style: 'thin' }\r\n    };\r\n  });\r\n\r\n  // Set response headers\r\n  res.setHeader(\r\n    'Content-Type',\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n  );\r\n  res.setHeader(\r\n    'Content-Disposition',\r\n    `attachment; filename=payroll_report_${new Date().toISOString().split('T')[0]}.xlsx`\r\n  );\r\n\r\n  // Send the workbook\r\n  await workbook.xlsx.write(res);\r\n  res.end();\r\n});"]}
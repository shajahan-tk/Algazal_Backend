{"version":3,"file":"attendanceController.js","sourceRoot":"","sources":["../../src/controllers/attendanceController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Attendance } from \"../models/attendanceModel\";\r\nimport { IProject, Project } from \"../models/projectModel\";\r\nimport dayjs from \"dayjs\";\r\nimport { IUser, User } from \"../models/userModel\";\r\nimport { Types } from \"mongoose\";\r\n\r\n// Mark attendance (supports both project and normal types)\r\nexport const markAttendance = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { projectId, userId } = req.params;\r\n    let { present, type = \"project\", workingHours = 0 } = req.body;\r\n\r\n    console.log('Request body:', req.body);\r\n    console.log('Present:', present);\r\n    console.log('Working hours:', workingHours);\r\n    console.log('Type:', type);\r\n\r\n    // Ensure markedBy exists and is valid\r\n    if (!req.user?.userId) {\r\n      throw new ApiError(401, \"Unauthorized - User not authenticated\");\r\n    }\r\n    const markedBy = new Types.ObjectId(req.user.userId);\r\n\r\n    // Get today's date at midnight (00:00:00)\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    // Validate input\r\n    if (typeof present !== \"boolean\") {\r\n      throw new ApiError(400, \"Present must be a boolean\");\r\n    }\r\n    if (![\"project\", \"normal\"].includes(type)) {\r\n      throw new ApiError(400, \"Invalid attendance type\");\r\n    }\r\n    \r\n    // FIXED: Convert time string to hours and validate\r\n    let workingHoursValue = 0;\r\n    \r\n    if (present) {\r\n      // Handle both number and time string formats\r\n      if (typeof workingHours === 'string' && workingHours.includes(':')) {\r\n        // Convert time string like \"15:00\" to hours\r\n        const [hours, minutes] = workingHours.split(':').map(Number);\r\n        workingHoursValue = hours + (minutes / 60);\r\n        \r\n        // Round to 2 decimal places for cleaner storage\r\n        workingHoursValue = Math.round(workingHoursValue * 100) / 100;\r\n      } else if (typeof workingHours === 'number') {\r\n        workingHoursValue = workingHours;\r\n      } else if (typeof workingHours === 'string') {\r\n        // Try to parse as number if it's a string number\r\n        workingHoursValue = parseFloat(workingHours);\r\n        if (isNaN(workingHoursValue)) {\r\n          throw new ApiError(400, \"Working hours must be a valid number or time string (HH:MM)\");\r\n        }\r\n      } else {\r\n        throw new ApiError(400, \"Working hours must be a number or time string (HH:MM)\");\r\n      }\r\n\r\n      // Validate the converted value\r\n      if (workingHoursValue < 0 || workingHoursValue > 24) {\r\n        throw new ApiError(400, \"Working hours must be between 0 and 24\");\r\n      }\r\n    } else {\r\n      // For absent cases, force workingHours to 0\r\n      workingHoursValue = 0;\r\n    }\r\n\r\n    // Use the converted value\r\n    workingHours = workingHoursValue;\r\n\r\n    let project;\r\n    if (type === \"project\") {\r\n      if (!projectId) {\r\n        throw new ApiError(\r\n          400,\r\n          \"Project ID is required for project attendance\"\r\n        );\r\n      }\r\n\r\n      project = await Project.findById(projectId);\r\n      if (!project) throw new ApiError(404, \"Project not found\");\r\n\r\n      // Check if user is assigned to project\r\n      const isAssigned =\r\n        (project.assignedWorkers?.some((w) => w.equals(userId)) ?? false) ||\r\n        (project.assignedDriver?.equals(userId) ?? false);\r\n\r\n      if (!isAssigned) {\r\n        throw new ApiError(400, \"User is not assigned to this project\");\r\n      }\r\n\r\n      // Only assigned driver can mark attendance for project\r\n      if (!project.assignedDriver?.equals(markedBy)) {\r\n        throw new ApiError(\r\n          403,\r\n          \"Only assigned driver can mark project attendance\"\r\n        );\r\n      }\r\n    }\r\n\r\n    // Find existing attendance record for today\r\n    const nextDay = new Date(today);\r\n    nextDay.setDate(today.getDate() + 1);\r\n\r\n    const query: any = {\r\n      user: userId,\r\n      date: { $gte: today, $lt: nextDay },\r\n      type,\r\n    };\r\n\r\n    if (type === \"project\") {\r\n      query.project = projectId;\r\n    }\r\n\r\n    let attendance = await Attendance.findOne(query);\r\n\r\n    if (attendance) {\r\n      // Update existing record\r\n      attendance.present = present;\r\n      attendance.workingHours = workingHours;\r\n      attendance.markedBy = markedBy;\r\n      await attendance.save();\r\n    } else {\r\n      // Create new record\r\n      attendance = await Attendance.create({\r\n        project: type === \"project\" ? projectId : undefined,\r\n        user: userId,\r\n        present,\r\n        workingHours,\r\n        markedBy,\r\n        date: today,\r\n        type,\r\n      });\r\n    }\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, attendance, \"Attendance marked successfully\"));\r\n  }\r\n);\r\n\r\n// Get attendance records (supports both types)\r\nexport const getAttendance = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { userId } = req.params;\r\n    const { startDate, endDate, type = \"project\", projectId } = req.query;\r\n\r\n    const filter: any = {\r\n      user: userId,\r\n      type,\r\n    };\r\n\r\n    // Add project filter if type is project\r\n    if (type === \"project\" && projectId) {\r\n      filter.project = projectId;\r\n    }\r\n\r\n    // Add date range if provided\r\n    if (startDate && endDate) {\r\n      filter.date = {\r\n        $gte: new Date(startDate as string),\r\n        $lte: new Date(endDate as string),\r\n      };\r\n    }\r\n\r\n    const attendance = await Attendance.find(filter)\r\n      .sort({ date: 1 })\r\n      .populate(\"markedBy\", \"firstName lastName\")\r\n      .populate(\"project\", \"projectName\");\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, attendance, \"Attendance records retrieved\"));\r\n  }\r\n);\r\n\r\n// Get project attendance summary (only for project type)\r\nexport const getProjectAttendance = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { projectId } = req.params;\r\n    const { date } = req.query;\r\n\r\n    const filter: any = {\r\n      project: projectId,\r\n      type: \"project\",\r\n    };\r\n    if (date) filter.date = new Date(date as string);\r\n\r\n    const attendance = await Attendance.find(filter)\r\n      .populate(\"user\", \"firstName lastName\")\r\n      .populate(\"markedBy\", \"firstName lastName\");\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, attendance, \"Project attendance retrieved\"));\r\n  }\r\n);\r\n\r\n// Get today's project attendance (only for project type)\r\nexport const getTodayProjectAttendance = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { projectId } = req.params;\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    // Get project with assigned workers\r\n    const project = await Project.findById(projectId)\r\n      .populate<{\r\n        assignedWorkers: (Pick<\r\n          IUser,\r\n          \"_id\" | \"firstName\" | \"lastName\" | \"profileImage\" | \"phoneNumbers\"\r\n        > & { _id: Types.ObjectId })[];\r\n      }>(\"assignedWorkers\", \"_id firstName lastName profileImage phoneNumbers\")\r\n      .populate<{\r\n        assignedDriver: Pick<IUser, \"_id\" | \"firstName\" | \"lastName\"> & {\r\n          _id: Types.ObjectId;\r\n        };\r\n      }>(\"assignedDriver\", \"_id firstName lastName\");\r\n\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project not found\");\r\n    }\r\n\r\n    // Get today's attendance records\r\n    const attendance = await Attendance.find({\r\n      project: projectId,\r\n      type: \"project\",\r\n      date: {\r\n        $gte: today,\r\n        $lt: new Date(today.getTime() + 24 * 60 * 60 * 1000),\r\n      },\r\n    });\r\n\r\n    // Merge worker data with attendance status\r\n    const workersWithAttendance =\r\n      project.assignedWorkers?.map((worker) => {\r\n        const attendanceRecord = attendance.find((record) =>\r\n          record.user.equals(worker._id)\r\n        );\r\n        return {\r\n          _id: worker._id,\r\n          firstName: worker.firstName,\r\n          lastName: worker.lastName,\r\n          profileImage: worker.profileImage,\r\n          phoneNumbers: worker.phoneNumbers,\r\n          present: attendanceRecord?.present || false,\r\n          workingHours: attendanceRecord?.workingHours || 0,\r\n          overtimeHours: attendanceRecord?.overtimeHours || 0,\r\n          markedBy: attendanceRecord?.markedBy || null,\r\n          markedAt: attendanceRecord?.createdAt || null,\r\n        };\r\n      }) || [];\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          project: {\r\n            _id: project._id,\r\n            projectName: project.projectName,\r\n            assignedDriver: project.assignedDriver,\r\n          },\r\n          workers: workersWithAttendance,\r\n          date: today,\r\n        },\r\n        \"Today's attendance retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// Get attendance summary (supports both types)\r\nexport const getAttendanceSummary = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { type = \"project\" } = req.query;\r\n    const { projectId } = req.params;\r\n    const { startDate, endDate } = req.query;\r\n\r\n    const dateFilter: any = { type };\r\n\r\n    // For project type, require projectId\r\n    if (type === \"project\") {\r\n      if (!projectId) {\r\n        throw new ApiError(\r\n          400,\r\n          \"Project ID is required for project attendance summary\"\r\n        );\r\n      }\r\n      dateFilter.project = projectId;\r\n    }\r\n\r\n    // Date range handling\r\n    if (startDate && endDate) {\r\n      dateFilter.date = {\r\n        $gte: new Date(startDate as string),\r\n        $lte: new Date(endDate as string),\r\n      };\r\n    }\r\n\r\n    // Get all attendance records\r\n    const attendanceRecords = await Attendance.find(dateFilter)\r\n      .populate(\"user\", \"firstName lastName profileImage\")\r\n      .populate(\"project\", \"projectName\")\r\n      .sort({ date: 1 });\r\n\r\n    // Get unique dates\r\n    const uniqueDates = [\r\n      ...new Set(\r\n        attendanceRecords.map((record) =>\r\n          dayjs(record.date).format(\"YYYY-MM-DD\")\r\n        )\r\n      ),\r\n    ].sort();\r\n\r\n    // Get all users who have attendance records\r\n    const users = Array.from(\r\n      new Set(attendanceRecords.map((record) => record.user))\r\n    );\r\n\r\n    // Create summary data structure\r\n    const summary = uniqueDates.map((date) => {\r\n      const dateObj: any = { date };\r\n\r\n      users.forEach((user: any) => {\r\n        const attendance = attendanceRecords.find(\r\n          (record) =>\r\n            dayjs(record.date).format(\"YYYY-MM-DD\") === date &&\r\n            record.user._id.toString() === user._id.toString()\r\n        );\r\n\r\n        dateObj[user._id.toString()] = attendance\r\n          ? {\r\n              present: attendance.present,\r\n              workingHours: attendance.workingHours,\r\n              overtimeHours: attendance.overtimeHours,\r\n            }\r\n          : null;\r\n      });\r\n\r\n      return dateObj;\r\n    });\r\n\r\n    // Calculate totals\r\n    const totals: any = { date: \"Total\" };\r\n    users.forEach((user: any) => {\r\n      const userRecords = attendanceRecords.filter(\r\n        (record) => record.user._id.toString() === user._id.toString()\r\n      );\r\n\r\n      totals[user._id.toString()] = {\r\n        presentDays: userRecords.filter((record) => record.present).length,\r\n        totalWorkingHours: userRecords.reduce(\r\n          (sum, record) => sum + record.workingHours,\r\n          0\r\n        ),\r\n        totalOvertimeHours: userRecords.reduce(\r\n          (sum, record) => sum + record.overtimeHours,\r\n          0\r\n        ),\r\n      };\r\n    });\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          type,\r\n          dates: uniqueDates,\r\n          users: users.map((user: any) => ({\r\n            _id: user._id,\r\n            name: `${user.firstName} ${user.lastName}`,\r\n            profileImage: user.profileImage,\r\n          })),\r\n          summary,\r\n          totals,\r\n          ...(type === \"project\" && { projectId }),\r\n        },\r\n        \"Attendance summary retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const dailyNormalAttendance = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { date } = req.query;\r\n\r\n    if (!date) {\r\n      throw new ApiError(400, \"Date is required\");\r\n    }\r\n\r\n    const startDate = new Date(date as string);\r\n    startDate.setHours(0, 0, 0, 0);\r\n\r\n    const endDate = new Date(startDate);\r\n    endDate.setDate(startDate.getDate() + 1);\r\n\r\n    // Get all users except drivers and workers\r\n    const users = await User.find({\r\n      role: { $nin: [\"driver\", \"worker\"] },\r\n    }).select(\"_id firstName lastName email profileImage role\");\r\n\r\n    // Get attendance records for the date\r\n    const attendanceRecords = await Attendance.find({\r\n      type: \"normal\",\r\n      date: {\r\n        $gte: startDate,\r\n        $lt: endDate,\r\n      },\r\n    }).populate(\"markedBy\", \"firstName lastName\");\r\n\r\n    // Merge user data with attendance status\r\n    const result = users.map((user) => {\r\n      const attendance = attendanceRecords.find(\r\n        (record) => record.user.toString() === user._id.toString()\r\n      );\r\n\r\n      return {\r\n        user: {\r\n          _id: user._id,\r\n          firstName: user.firstName,\r\n          lastName: user.lastName,\r\n          email: user.email,\r\n          profileImage: user.profileImage,\r\n          role: user.role,\r\n        },\r\n        present: attendance?.present || false,\r\n        workingHours: attendance?.workingHours || 0,\r\n        overtimeHours: attendance?.overtimeHours || 0,\r\n        markedBy: attendance?.markedBy || null,\r\n        markedAt: attendance?.createdAt || null,\r\n      };\r\n    });\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          date: startDate,\r\n          users: result,\r\n        },\r\n        \"Daily normal attendance retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// FIXED: Get user's monthly attendance (both project and normal types)\r\nexport const getNormalMonthlyAttendance = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { userId } = req.params;\r\n    const { month, year } = req.query;\r\n\r\n    if (!month || !year) {\r\n      throw new ApiError(400, \"Month and year are required\");\r\n    }\r\n\r\n    const monthNum = parseInt(month as string);\r\n    const yearNum = parseInt(year as string);\r\n\r\n    if (isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n      throw new ApiError(400, \"Invalid month (must be 1-12)\");\r\n    }\r\n\r\n    if (isNaN(yearNum) || yearNum < 2000 || yearNum > 2100) {\r\n      throw new ApiError(400, \"Invalid year\");\r\n    }\r\n\r\n    const startDate = new Date(yearNum, monthNum - 1, 1);\r\n    const endDate = new Date(yearNum, monthNum, 0);\r\n    endDate.setHours(23, 59, 59, 999);\r\n\r\n    // Get ALL attendance records for the user (both project and normal)\r\n    const attendance = await Attendance.find({\r\n      user: userId,\r\n      date: {\r\n        $gte: startDate,\r\n        $lte: endDate,\r\n      },\r\n    })\r\n      .sort({ date: 1, type: 1 }) // Sort by date, then type for consistent ordering\r\n      .populate(\"markedBy\", \"firstName lastName\")\r\n      .populate(\"project\", \"projectName\");\r\n\r\n    // Separate attendance by type\r\n    const normalAttendance = attendance.filter(a => a.type === 'normal');\r\n    const projectAttendance = attendance.filter(a => a.type === 'project');\r\n\r\n    // Calculate totals for each type\r\n    const normalTotals = {\r\n      presentDays: normalAttendance.filter((a) => a.present).length,\r\n      totalWorkingHours: normalAttendance.reduce((sum, a) => sum + a.workingHours, 0),\r\n      totalOvertimeHours: normalAttendance.reduce((sum, a) => sum + a.overtimeHours, 0),\r\n    };\r\n\r\n    const projectTotals = {\r\n      presentDays: projectAttendance.filter((a) => a.present).length,\r\n      totalWorkingHours: projectAttendance.reduce((sum, a) => sum + a.workingHours, 0),\r\n      totalOvertimeHours: projectAttendance.reduce((sum, a) => sum + a.overtimeHours, 0),\r\n    };\r\n\r\n    const overallTotals = {\r\n      presentDays: attendance.filter((a) => a.present).length,\r\n      totalWorkingHours: attendance.reduce((sum, a) => sum + a.workingHours, 0),\r\n      totalOvertimeHours: attendance.reduce((sum, a) => sum + a.overtimeHours, 0),\r\n    };\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          attendance: attendance, // All attendance records\r\n          normalAttendance,\r\n          projectAttendance,\r\n          totals: {\r\n            normal: normalTotals,\r\n            project: projectTotals,\r\n            overall: overallTotals,\r\n          },\r\n          month: monthNum,\r\n          year: yearNum,\r\n        },\r\n        \"Monthly attendance retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// NEW: Get user's monthly attendance by type\r\nexport const getUserMonthlyAttendanceByType = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { userId } = req.params;\r\n    const { month, year, type = 'all' } = req.query;\r\n\r\n    if (!month || !year) {\r\n      throw new ApiError(400, \"Month and year are required\");\r\n    }\r\n\r\n    const monthNum = parseInt(month as string);\r\n    const yearNum = parseInt(year as string);\r\n\r\n    if (isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n      throw new ApiError(400, \"Invalid month (must be 1-12)\");\r\n    }\r\n\r\n    if (isNaN(yearNum) || yearNum < 2000 || yearNum > 2100) {\r\n      throw new ApiError(400, \"Invalid year\");\r\n    }\r\n\r\n    const startDate = new Date(yearNum, monthNum - 1, 1);\r\n    const endDate = new Date(yearNum, monthNum, 0);\r\n    endDate.setHours(23, 59, 59, 999);\r\n\r\n    const filter: any = {\r\n      user: userId,\r\n      date: {\r\n        $gte: startDate,\r\n        $lte: endDate,\r\n      },\r\n    };\r\n\r\n    // Add type filter if specified\r\n    if (type !== 'all' && ['project', 'normal'].includes(type as string)) {\r\n      filter.type = type;\r\n    }\r\n\r\n    const attendance = await Attendance.find(filter)\r\n      .sort({ date: 1, type: 1 })\r\n      .populate(\"markedBy\", \"firstName lastName\")\r\n      .populate(\"project\", \"projectName\");\r\n\r\n    // Calculate totals\r\n    const totals = {\r\n      presentDays: attendance.filter((a) => a.present).length,\r\n      totalWorkingHours: attendance.reduce((sum, a) => sum + a.workingHours, 0),\r\n      totalOvertimeHours: attendance.reduce((sum, a) => sum + a.overtimeHours, 0),\r\n    };\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          attendance,\r\n          totals,\r\n          type: type as string,\r\n          month: monthNum,\r\n          year: yearNum,\r\n        },\r\n        `Monthly ${type === 'all' ? '' : type + ' '}attendance retrieved successfully`\r\n      )\r\n    );\r\n  }\r\n);"]}
{"version":3,"file":"monthlyReportController.js","sourceRoot":"","sources":["../../src/controllers/monthlyReportController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Bill, BillType, IBill } from \"../models/billModel\";\r\nimport { Payroll } from \"../models/payrollModel\";\r\nimport { Category } from \"../models/categoryModel\";\r\nimport { Shop } from \"../models/shopModel\";\r\nimport { User } from \"../models/userModel\";\r\nimport ExcelJS from \"exceljs\";\r\ninterface IBillAggregated extends IBill {\r\n  shopDetails?: {\r\n    shopName: string;\r\n  };\r\n  categoryDetails?: {\r\n    name: string;\r\n  };\r\n}\r\n\r\nfunction getBillDescription(bill: IBillAggregated): string {\r\n  switch (bill.billType) {\r\n    case 'general':\r\n      return bill.remarks || `General bill from ${bill?.shopDetails?.shopName || 'unknown shop'}`;\r\n    \r\n    case 'fuel':\r\n      return bill.description || \r\n        `Fuel for ${bill.vehicle ? bill.vehicle.toString() : 'unknown vehicle'}` +\r\n        (bill.kilometer ? ` (${bill.kilometer} km)` : '') +\r\n        (bill.liter ? ` (${bill.liter} L)` : '');\r\n\r\n    case 'mess':\r\n      return bill.remarks || 'Mess expenses';\r\n\r\n    case 'vehicle':\r\n      return bill.purpose || \r\n        `Vehicle maintenance for ${bill.vehicles?.length ? bill.vehicles.length + ' vehicles' : 'unknown vehicle'}`;\r\n\r\n    case 'accommodation':\r\n      return bill.note || \r\n        (bill.roomNo ? `Accommodation for room ${bill.roomNo}` : 'Accommodation expenses');\r\n\r\n    case 'commission':\r\n      return bill.remarks || 'Commission payment';\r\n\r\n    default:\r\n      return bill.remarks || 'No description available';\r\n  }\r\n}\r\nexport const generateMonthlyReport = asyncHandler(async (req: Request, res: Response) => {\r\n    const { year, month } = req.query;\r\n\r\n    // Validate inputs\r\n    if (!year || !month) {\r\n        throw new ApiError(400, \"Year and month are required\");\r\n    }\r\n\r\n    const yearNum = parseInt(year as string);\r\n    const monthNum = parseInt(month as string);\r\n\r\n    if (isNaN(yearNum) || isNaN(monthNum) || monthNum < 1 || monthNum > 12) {\r\n        throw new ApiError(400, \"Invalid year or month value\");\r\n    }\r\n\r\n    // Calculate date range with proper timezone handling\r\n    const startDate = new Date(Date.UTC(yearNum, monthNum - 1, 1));\r\n    const endDate = new Date(Date.UTC(yearNum, monthNum, 0, 23, 59, 59));\r\n\r\n    // Create workbook\r\n    const workbook = new ExcelJS.Workbook();\r\n    const summarySheet = workbook.addWorksheet(\"Summary\");\r\n    const detailedBreakdownSheet = workbook.addWorksheet(\"Detailed Breakdown\");\r\n    const billsSheet = workbook.addWorksheet(\"Bills\");\r\n    const payrollSheet = workbook.addWorksheet(\"Payroll\");\r\n    const categorySheet = workbook.addWorksheet(\"Categories\");\r\n\r\n    // Get bills with proper number conversion\r\n    const bills = await Bill.aggregate([\r\n        {\r\n            $match: {\r\n                billDate: { $gte: startDate, $lte: endDate }\r\n            }\r\n        },\r\n        {\r\n            $addFields: {\r\n                amount: { $toDouble: \"$amount\" } // Ensure numeric\r\n            }\r\n        },\r\n        {\r\n            $lookup: {\r\n                from: \"categories\",\r\n                localField: \"category\",\r\n                foreignField: \"_id\",\r\n                as: \"categoryDetails\"\r\n            }\r\n        },\r\n        { $unwind: { path: \"$categoryDetails\", preserveNullAndEmptyArrays: true } },\r\n        {\r\n            $lookup: {\r\n                from: \"shops\",\r\n                localField: \"shop\",\r\n                foreignField: \"_id\",\r\n                as: \"shopDetails\"\r\n            }\r\n        },\r\n        { $unwind: { path: \"$shopDetails\", preserveNullAndEmptyArrays: true } }\r\n    ]);\r\n\r\n    // Get payroll with proper number conversion\r\n    const period = `${monthNum.toString().padStart(2, '0')}-${yearNum}`;\r\n    const payrolls = await Payroll.aggregate([\r\n        {\r\n            $match: {\r\n                period: { $regex: new RegExp(`^${period}$`) }\r\n            }\r\n        },\r\n        {\r\n            $addFields: {\r\n                allowance: { $toDouble: \"$allowance\" },\r\n                deduction: { $toDouble: \"$deduction\" },\r\n                mess: { $toDouble: \"$mess\" },\r\n                advance: { $toDouble: \"$advance\" },\r\n                net: { $toDouble: \"$net\" }\r\n            }\r\n        },\r\n        {\r\n            $lookup: {\r\n                from: \"users\",\r\n                localField: \"employee\",\r\n                foreignField: \"_id\",\r\n                as: \"employeeDetails\"\r\n            }\r\n        },\r\n        { $unwind: \"$employeeDetails\" }\r\n    ]);\r\n\r\n    // Calculate totals with proper rounding\r\n    const totalBills = parseFloat(bills.reduce((sum, bill) => sum + (bill.amount || 0), 0).toFixed(2));\r\n    const totalPayroll = parseFloat(payrolls.reduce((sum, payroll) => sum + (payroll.net || 0), 0).toFixed(2));\r\n    const grandTotal = parseFloat((totalBills + totalPayroll).toFixed(2));\r\n\r\n    // Summary Sheet\r\n    summarySheet.columns = [\r\n        { header: \"Metric\", key: \"metric\", width: 30 },\r\n        { header: \"Amount (AED)\", key: \"amount\", width: 20, style: { numFmt: \"#,##0.00\" } }\r\n    ];\r\n    summarySheet.addRows([\r\n        { metric: \"Total Bills\", amount: totalBills },\r\n        { metric: \"Total Payroll\", amount: totalPayroll },\r\n        { metric: \"Grand Total\", amount: grandTotal }\r\n    ]);\r\n\r\n    // Detailed Breakdown Sheet - Simple Bill Type + Category format\r\n    detailedBreakdownSheet.columns = [\r\n        { header: \"Bill Type + Category\", key: \"description\", width: 40 },\r\n        { header: \"Total Amount (AED)\", key: \"totalAmount\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Count\", key: \"count\", width: 10 }\r\n    ];\r\n\r\n    // Get categories for later use\r\n    const categories = await Category.find();\r\n    \r\n    // Define type for billTypeCategories array\r\n    interface BillTypeCategory {\r\n        key: string;\r\n        billType: string;\r\n        category: string;\r\n        description: string;\r\n        total: number;\r\n        count: number;\r\n    }\r\n    \r\n    // Create simple breakdown exactly as requested\r\n    const billTypeCategories: BillTypeCategory[] = [];\r\n    \r\n    // Group bills by bill type and category combination\r\n    bills.forEach(bill => {\r\n        const billType = bill.billType || 'general';\r\n        const categoryName = bill.categoryDetails?.name || 'Uncategorized';\r\n        const key = `${billType}_${categoryName}`;\r\n        \r\n        const existing = billTypeCategories.find(item => item.key === key);\r\n        if (existing) {\r\n            existing.total += bill.amount;\r\n            existing.count += 1;\r\n        } else {\r\n            billTypeCategories.push({\r\n                key: key,\r\n                billType: billType,\r\n                category: categoryName,\r\n                description: `${billType} bills ${categoryName} category`,\r\n                total: bill.amount,\r\n                count: 1\r\n            });\r\n        }\r\n    });\r\n\r\n    // Sort by bill type and then by category\r\n    billTypeCategories.sort((a, b) => {\r\n        if (a.billType !== b.billType) {\r\n            return a.billType.localeCompare(b.billType);\r\n        }\r\n        return a.category.localeCompare(b.category);\r\n    });\r\n\r\n    // Add rows exactly as requested format\r\n    billTypeCategories.forEach(item => {\r\n        detailedBreakdownSheet.addRow({\r\n            description: item.description,\r\n            totalAmount: parseFloat(item.total.toFixed(2)),\r\n            count: item.count\r\n        });\r\n    });\r\n\r\n    // Rest of the function remains the same...\r\n    // Bills Sheet\r\n    billsSheet.columns = [\r\n        { header: \"Date\", key: \"date\", width: 12, style: { numFmt: \"dd-mmm-yyyy\" } },\r\n        { header: \"Type\", key: \"type\", width: 15 },\r\n        { header: \"Category\", key: \"category\", width: 20 },\r\n        { header: \"Shop\", key: \"shop\", width: 20 },\r\n        { header: \"Amount\", key: \"amount\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Description\", key: \"description\", width: 40 }\r\n    ];\r\n\r\n    bills.forEach(bill => {\r\n        billsSheet.addRow({\r\n            date: bill.billDate,\r\n            type: bill.billType,\r\n            category: bill.categoryDetails?.name || \"N/A\",\r\n            shop: bill.shopDetails?.shopName || \"N/A\",\r\n            amount: parseFloat(bill.amount.toFixed(2)),\r\n            description: getBillDescription(bill)\r\n        });\r\n    });\r\n\r\n    // Payroll Sheet\r\n    payrollSheet.columns = [\r\n        { header: \"Employee\", key: \"employee\", width: 25 },\r\n        { header: \"Labour Card\", key: \"labourCard\", width: 15 },\r\n        { header: \"Allowance\", key: \"allowance\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Deduction\", key: \"deduction\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Mess\", key: \"mess\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Advance\", key: \"advance\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Net Salary\", key: \"net\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Period\", key: \"period\", width: 12 }\r\n    ];\r\n\r\n    payrolls.forEach(payroll => {\r\n        payrollSheet.addRow({\r\n            employee: `${payroll.employeeDetails.firstName} ${payroll.employeeDetails.lastName}`,\r\n            labourCard: payroll.labourCard,\r\n            allowance: parseFloat(payroll.allowance.toFixed(2)),\r\n            deduction: parseFloat(payroll.deduction.toFixed(2)),\r\n            mess: parseFloat(payroll.mess.toFixed(2)),\r\n            advance: parseFloat(payroll.advance.toFixed(2)),\r\n            net: parseFloat(payroll.net.toFixed(2)),\r\n            period: payroll.period\r\n        });\r\n    });\r\n\r\n    // Category Breakdown Sheet\r\n    categorySheet.columns = [\r\n        { header: \"Category\", key: \"category\", width: 25 },\r\n        { header: \"Total\", key: \"total\", width: 15, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Count\", key: \"count\", width: 10 },\r\n        { header: \"Average\", key: \"average\", width: 15, style: { numFmt: \"#,##0.00\" } }\r\n    ];\r\n\r\n    categories.forEach(category => {\r\n        const categoryBills = bills.filter(bill => \r\n            bill.categoryDetails?._id.equals(category._id)\r\n        );\r\n        const categoryTotal = parseFloat(categoryBills\r\n            .reduce((sum, bill) => sum + (bill.amount || 0), 0)\r\n            .toFixed(2));\r\n        const categoryAverage = categoryBills.length > 0 ? categoryTotal / categoryBills.length : 0;\r\n        \r\n        categorySheet.addRow({\r\n            category: category.name,\r\n            total: categoryTotal,\r\n            count: categoryBills.length,\r\n            average: parseFloat(categoryAverage.toFixed(2))\r\n        });\r\n    });\r\n\r\n    // Style all sheets\r\n    [summarySheet, detailedBreakdownSheet, billsSheet, payrollSheet, categorySheet].forEach(sheet => {\r\n        // Style header row\r\n        sheet.getRow(1).eachCell(cell => {\r\n            cell.font = { bold: true };\r\n            cell.fill = { type: \"pattern\", pattern: \"solid\", fgColor: { argb: \"FFD3D3D3\" } };\r\n            cell.border = { \r\n                top: { style: \"thin\" }, \r\n                left: { style: \"thin\" }, \r\n                bottom: { style: \"thin\" }, \r\n                right: { style: \"thin\" } \r\n            };\r\n        });\r\n        \r\n        // Auto filter for data sheets\r\n        if (sheet !== detailedBreakdownSheet) {\r\n            sheet.autoFilter = { \r\n                from: { row: 1, column: 1 }, \r\n                to: { row: 1, column: sheet.columnCount } \r\n            };\r\n        }\r\n    });\r\n\r\n    // Add auto filter to detailed breakdown\r\n    detailedBreakdownSheet.autoFilter = { \r\n        from: { row: 1, column: 1 }, \r\n        to: { row: 1, column: detailedBreakdownSheet.columnCount } \r\n    };\r\n\r\n    // Send response\r\n    res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n    res.setHeader(\"Content-Disposition\", `attachment; filename=detailed_report_${year}-${month}.xlsx`);\r\n    await workbook.xlsx.write(res);\r\n    res.end();\r\n});\r\n\r\nexport const generateYearlyReport = asyncHandler(async (req: Request, res: Response) => {\r\n    const { year } = req.query;\r\n\r\n    // Validate input\r\n    if (!year) {\r\n        throw new ApiError(400, \"Year is required\");\r\n    }\r\n\r\n    const yearNum = parseInt(year as string);\r\n    if (isNaN(yearNum)) {\r\n        throw new ApiError(400, \"Invalid year value\");\r\n    }\r\n\r\n    // Create a new workbook\r\n    const workbook = new ExcelJS.Workbook();\r\n    \r\n    // Add sheets\r\n    const summarySheet = workbook.addWorksheet(\"Summary\");\r\n    const monthlySheet = workbook.addWorksheet(\"Monthly Breakdown\");\r\n    const payrollSheet = workbook.addWorksheet(\"Payroll Summary\");\r\n    const billsSheet = workbook.addWorksheet(\"Bills Summary\");\r\n\r\n    // 1. Get all bills for the year\r\n    const bills = await Bill.aggregate([\r\n        {\r\n            $match: {\r\n                billDate: {\r\n                    $gte: new Date(yearNum, 0, 1),\r\n                    $lte: new Date(yearNum, 11, 31, 23, 59, 59)\r\n                }\r\n            }\r\n        },\r\n        {\r\n            $addFields: {\r\n                month: { $month: \"$billDate\" }\r\n            }\r\n        },\r\n        {\r\n            $lookup: {\r\n                from: \"categories\",\r\n                localField: \"category\",\r\n                foreignField: \"_id\",\r\n                as: \"categoryDetails\"\r\n            }\r\n        },\r\n        {\r\n            $unwind: {\r\n                path: \"$categoryDetails\",\r\n                preserveNullAndEmptyArrays: true\r\n            }\r\n        }\r\n    ]);\r\n\r\n    // 2. Get all payroll for the year\r\n    const payrolls = await Payroll.aggregate([\r\n        {\r\n            $match: {\r\n                period: { $regex: `^\\\\d{2}-${yearNum}$` }\r\n            }\r\n        },\r\n        {\r\n            $addFields: {\r\n                month: { $toInt: { $substr: [\"$period\", 0, 2] } }\r\n            }\r\n        },\r\n        {\r\n            $lookup: {\r\n                from: \"users\",\r\n                localField: \"employee\",\r\n                foreignField: \"_id\",\r\n                as: \"employeeDetails\"\r\n            }\r\n        },\r\n        {\r\n            $unwind: \"$employeeDetails\"\r\n        }\r\n    ]);\r\n\r\n    // 3. Calculate totals\r\n    const totalBills = bills.reduce((sum, bill) => sum + bill.amount, 0);\r\n    const totalPayroll = payrolls.reduce((sum, payroll) => sum + payroll.net, 0);\r\n    const grandTotal = totalBills + totalPayroll;\r\n\r\n    // 4. Create Summary Sheet\r\n    summarySheet.columns = [\r\n        { header: \"Metric\", key: \"metric\", width: 30 },\r\n        { header: \"Amount (AED)\", key: \"amount\", width: 20, style: { numFmt: \"#,##0.00\" } }\r\n    ];\r\n\r\n    summarySheet.addRows([\r\n        { metric: \"Total Bills\", amount: totalBills },\r\n        { metric: \"Total Payroll\", amount: totalPayroll },\r\n        { metric: \"Grand Total Expenses\", amount: grandTotal }\r\n    ]);\r\n\r\n    // 5. Create Monthly Breakdown Sheet\r\n    monthlySheet.columns = [\r\n        { header: \"Month\", key: \"month\", width: 15 },\r\n        { header: \"Bills Total (AED)\", key: \"billsTotal\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Payroll Total (AED)\", key: \"payrollTotal\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Combined Total (AED)\", key: \"combinedTotal\", width: 20, style: { numFmt: \"#,##0.00\" } }\r\n    ];\r\n\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \r\n                       \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    for (let month = 1; month <= 12; month++) {\r\n        const monthBills = bills.filter(bill => bill.month === month);\r\n        const monthPayrolls = payrolls.filter(payroll => payroll.month === month);\r\n        \r\n        const billsTotal = monthBills.reduce((sum, bill) => sum + bill.amount, 0);\r\n        const payrollTotal = monthPayrolls.reduce((sum, payroll) => sum + payroll.net, 0);\r\n        \r\n        monthlySheet.addRow({\r\n            month: monthNames[month - 1],\r\n            billsTotal,\r\n            payrollTotal,\r\n            combinedTotal: billsTotal + payrollTotal\r\n        });\r\n    }\r\n\r\n    // 6. Create Payroll Summary Sheet\r\n    payrollSheet.columns = [\r\n        { header: \"Employee\", key: \"employee\", width: 25 },\r\n        { header: \"Total Allowance (AED)\", key: \"totalAllowance\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Total Deduction (AED)\", key: \"totalDeduction\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Total Mess (AED)\", key: \"totalMess\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Total Advance (AED)\", key: \"totalAdvance\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Total Net Salary (AED)\", key: \"totalNet\", width: 20, style: { numFmt: \"#,##0.00\" } }\r\n    ];\r\n\r\n    // Group payroll by employee\r\n    const employeePayrollMap = new Map();\r\n    payrolls.forEach(payroll => {\r\n        const employeeId = payroll.employee.toString();\r\n        if (!employeePayrollMap.has(employeeId)) {\r\n            employeePayrollMap.set(employeeId, {\r\n                employee: `${payroll.employeeDetails.firstName} ${payroll.employeeDetails.lastName}`,\r\n                totalAllowance: 0,\r\n                totalDeduction: 0,\r\n                totalMess: 0,\r\n                totalAdvance: 0,\r\n                totalNet: 0\r\n            });\r\n        }\r\n        \r\n        const entry = employeePayrollMap.get(employeeId);\r\n        entry.totalAllowance += payroll.allowance;\r\n        entry.totalDeduction += payroll.deduction;\r\n        entry.totalMess += payroll.mess;\r\n        entry.totalAdvance += payroll.advance;\r\n        entry.totalNet += payroll.net;\r\n    });\r\n\r\n    // Add to sheet\r\n    for (const entry of employeePayrollMap.values()) {\r\n        payrollSheet.addRow(entry);\r\n    }\r\n\r\n    // 7. Create Bills Summary Sheet\r\n    billsSheet.columns = [\r\n        { header: \"Bill Type\", key: \"billType\", width: 15 },\r\n        { header: \"Total Amount (AED)\", key: \"totalAmount\", width: 20, style: { numFmt: \"#,##0.00\" } },\r\n        { header: \"Count\", key: \"count\", width: 10 }\r\n    ];\r\n\r\n    // Group bills by type\r\n    const billTypeMap = new Map();\r\n    bills.forEach(bill => {\r\n        if (!billTypeMap.has(bill.billType)) {\r\n            billTypeMap.set(bill.billType, {\r\n                billType: bill.billType,\r\n                totalAmount: 0,\r\n                count: 0\r\n            });\r\n        }\r\n        \r\n        const entry = billTypeMap.get(bill.billType);\r\n        entry.totalAmount += bill.amount;\r\n        entry.count += 1;\r\n    });\r\n\r\n    // Add to sheet\r\n    for (const entry of billTypeMap.values()) {\r\n        billsSheet.addRow(entry);\r\n    }\r\n\r\n    // Add category breakdown for each bill type\r\n    const categories = await Category.find();\r\n    const billTypes = [...billTypeMap.keys()];\r\n    \r\n    for (const type of billTypes) {\r\n        billsSheet.addRow({}); // Empty row\r\n        \r\n        // Add header for category breakdown\r\n        billsSheet.addRow({\r\n            billType: `${type} by Category`\r\n        });\r\n        \r\n        // Get bills for this type\r\n        const typeBills = bills.filter(bill => bill.billType === type);\r\n        \r\n        // Group by category\r\n        const categoryMap = new Map();\r\n        \r\n        for (const bill of typeBills) {\r\n            const categoryName = bill.categoryDetails?.name || \"Uncategorized\";\r\n            if (!categoryMap.has(categoryName)) {\r\n                categoryMap.set(categoryName, {\r\n                    category: categoryName,\r\n                    totalAmount: 0,\r\n                    count: 0\r\n                });\r\n            }\r\n            \r\n            const entry = categoryMap.get(categoryName);\r\n            entry.totalAmount += bill.amount;\r\n            entry.count += 1;\r\n        }\r\n        \r\n        // Add to sheet\r\n        for (const entry of categoryMap.values()) {\r\n            billsSheet.addRow({\r\n                billType: \"\",\r\n                ...entry\r\n            });\r\n        }\r\n    }\r\n\r\n    // Style all sheets\r\n    [summarySheet, monthlySheet, payrollSheet, billsSheet].forEach(sheet => {\r\n        // Style header row\r\n        sheet.getRow(1).eachCell(cell => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"FFD3D3D3\" }\r\n            };\r\n            cell.border = {\r\n                top: { style: \"thin\" },\r\n                left: { style: \"thin\" },\r\n                bottom: { style: \"thin\" },\r\n                right: { style: \"thin\" }\r\n            };\r\n        });\r\n\r\n        // Freeze header row\r\n        sheet.views = [{ state: \"frozen\", ySplit: 1 }];\r\n\r\n        // Auto filter\r\n        sheet.autoFilter = {\r\n            from: {\r\n                row: 1,\r\n                column: 1\r\n            },\r\n            to: {\r\n                row: 1,\r\n                column: sheet.columnCount\r\n            }\r\n        };\r\n    });\r\n\r\n    // Set response headers for Excel file download\r\n    res.setHeader(\r\n        \"Content-Type\",\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n    );\r\n    res.setHeader(\r\n        \"Content-Disposition\",\r\n        `attachment; filename=yearly_report_${year}.xlsx`\r\n    );\r\n\r\n    // Write the workbook to the response\r\n    await workbook.xlsx.write(res);\r\n    res.end();\r\n});"]}
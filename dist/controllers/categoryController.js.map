{"version":3,"file":"categoryController.js","sourceRoot":"","sources":["../../src/controllers/categoryController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Category } from \"../models/categoryModel\";\r\n\r\nexport const createCategory = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { name, description } = req.body;\r\n\r\n    if (!name) {\r\n      throw new ApiError(400, \"Category name is required\");\r\n    }\r\n\r\n    // Check if category already exists\r\n    const existingCategory = await Category.findOne({ name });\r\n    if (existingCategory) {\r\n      throw new ApiError(400, \"Category with this name already exists\");\r\n    }\r\n\r\n    const category = await Category.create({\r\n      name,\r\n      description,\r\n      createdBy: req.user?.userId,\r\n    });\r\n\r\n    res\r\n      .status(201)\r\n      .json(new ApiResponse(201, category, \"Category created successfully\"));\r\n  }\r\n);\r\n\r\nexport const getCategories = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const page = parseInt(req.query.page as string) || 1;\r\n    const limit = parseInt(req.query.limit as string) || 10;\r\n    const skip = (page - 1) * limit;\r\n\r\n    const filter: any = {};\r\n\r\n    // Search functionality\r\n    if (req.query.search) {\r\n      filter.name = { $regex: req.query.search, $options: \"i\" };\r\n    }\r\n\r\n    const total = await Category.countDocuments(filter);\r\n    const categories = await Category.find(filter)\r\n      .skip(skip)\r\n      .limit(limit)\r\n      .sort({ name: 1 })\r\n      .populate(\"createdBy\", \"firstName lastName email\");\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          categories,\r\n          pagination: {\r\n            total,\r\n            page,\r\n            limit,\r\n            totalPages: Math.ceil(total / limit),\r\n            hasNextPage: page * limit < total,\r\n            hasPreviousPage: page > 1,\r\n          },\r\n        },\r\n        \"Categories retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nexport const getCategory = asyncHandler(async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const category = await Category.findById(id).populate(\r\n    \"createdBy\",\r\n    \"firstName lastName email\"\r\n  );\r\n  if (!category) {\r\n    throw new ApiError(404, \"Category not found\");\r\n  }\r\n\r\n  res\r\n    .status(200)\r\n    .json(new ApiResponse(200, category, \"Category retrieved successfully\"));\r\n});\r\n\r\nexport const updateCategory = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n    const { name, description } = req.body;\r\n\r\n    const category = await Category.findById(id);\r\n    if (!category) {\r\n      throw new ApiError(404, \"Category not found\");\r\n    }\r\n\r\n    // Check if name is being updated and conflicts with other categories\r\n    if (name && name !== category.name) {\r\n      const existingCategory = await Category.findOne({\r\n        name,\r\n        _id: { $ne: id },\r\n      });\r\n\r\n      if (existingCategory) {\r\n        throw new ApiError(400, \"Another category already uses this name\");\r\n      }\r\n    }\r\n\r\n    const updatedCategory = await Category.findByIdAndUpdate(\r\n      id,\r\n      {\r\n        name: name || category.name,\r\n        description:\r\n          description !== undefined ? description : category.description,\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    res\r\n      .status(200)\r\n      .json(\r\n        new ApiResponse(200, updatedCategory, \"Category updated successfully\")\r\n      );\r\n  }\r\n);\r\n\r\nexport const deleteCategory = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { id } = req.params;\r\n\r\n    const category = await Category.findById(id);\r\n    if (!category) {\r\n      throw new ApiError(404, \"Category not found\");\r\n    }\r\n\r\n    await Category.findByIdAndDelete(id);\r\n\r\n    res\r\n      .status(200)\r\n      .json(new ApiResponse(200, null, \"Category deleted successfully\"));\r\n  }\r\n);\r\n    "]}
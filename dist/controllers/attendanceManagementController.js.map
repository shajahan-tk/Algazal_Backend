{"version":3,"file":"attendanceManagementController.js","sourceRoot":"","sources":["../../src/controllers/attendanceManagementController.ts"],"names":[],"mappings":"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","sourcesContent":["// controllers/attendanceManagementController.js\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Attendance } from \"../models/attendanceModel\";\r\nimport { Project } from \"../models/projectModel\";\r\nimport { User } from \"../models/userModel\";\r\nimport dayjs from \"dayjs\";\r\nimport { Types } from \"mongoose\";\r\nimport { Request, Response } from \"express\";\r\n\r\n// Create or Update attendance record\r\nexport const createOrUpdateAttendance = asyncHandler(async (req:Request, res:Response) => {\r\n  const { userId, date, type = \"normal\" } = req.body;\r\n  let { present, workingHours = 0, overtimeHours = 0, projectId } = req.body;\r\n\r\n  console.log('Create/Update Attendance Request:', req.body);\r\n\r\n  // Validate required fields\r\n  if (!userId || !date) {\r\n    throw new ApiError(400, \"User ID and date are required\");\r\n  }\r\n\r\n  if (![\"project\", \"normal\"].includes(type)) {\r\n    throw new ApiError(400, \"Invalid attendance type\");\r\n  }\r\n\r\n  // For project attendance, validate project\r\n  if (type === \"project\") {\r\n    if (!projectId) {\r\n      throw new ApiError(400, \"Project ID is required for project attendance\");\r\n    }\r\n    \r\n    // Validate project exists\r\n    const project = await Project.findById(projectId);\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project not found\");\r\n    }\r\n\r\n    // Check if user is assigned to project\r\n    const isAssigned =\r\n      (project.assignedWorkers?.some((w) => w.equals(userId)) ?? false) ||\r\n      (project.assignedDriver?.equals(userId) ?? false);\r\n\r\n    if (!isAssigned) {\r\n      throw new ApiError(400, \"User is not assigned to this project\");\r\n    }\r\n  }\r\n\r\n  // Ensure markedBy exists\r\n  if (!req.user?.userId) {\r\n    throw new ApiError(401, \"Unauthorized - User not authenticated\");\r\n  }\r\n  const markedBy = new Types.ObjectId(req.user.userId);\r\n\r\n  // Parse and validate date\r\n  const attendanceDate = new Date(date);\r\n  if (isNaN(attendanceDate.getTime())) {\r\n    throw new ApiError(400, \"Invalid date format\");\r\n  }\r\n  attendanceDate.setHours(0, 0, 0, 0);\r\n\r\n  const nextDay = new Date(attendanceDate);\r\n  nextDay.setDate(attendanceDate.getDate() + 1);\r\n\r\n  // Validate user exists\r\n  const user = await User.findById(userId);\r\n  if (!user) {\r\n    throw new ApiError(404, \"User not found\");\r\n  }\r\n\r\n  // Convert working hours - FIXED: Handle both string and number properly\r\n  let workingHoursValue = 0;\r\n  let overtimeHoursValue = 0;\r\n\r\n  if (present) {\r\n    // Handle working hours\r\n    if (typeof workingHours === 'string') {\r\n      if (workingHours.includes(':')) {\r\n        // Convert time string like \"8:30\" to hours\r\n        const [hours, minutes] = workingHours.split(':').map(Number);\r\n        workingHoursValue = hours + (minutes / 60);\r\n      } else {\r\n        // Convert string number to float\r\n        workingHoursValue = parseFloat(workingHours);\r\n      }\r\n    } else if (typeof workingHours === 'number') {\r\n      workingHoursValue = workingHours;\r\n    }\r\n    \r\n    // Validate working hours\r\n    if (isNaN(workingHoursValue) || workingHoursValue < 0 || workingHoursValue > 24) {\r\n      throw new ApiError(400, \"Working hours must be between 0 and 24\");\r\n    }\r\n\r\n    // Round to 2 decimal places\r\n    workingHoursValue = Math.round(workingHoursValue * 100) / 100;\r\n\r\n    // Handle overtime hours\r\n    if (typeof overtimeHours === 'string') {\r\n      if (overtimeHours.includes(':')) {\r\n        const [hours, minutes] = overtimeHours.split(':').map(Number);\r\n        overtimeHoursValue = hours + (minutes / 60);\r\n      } else {\r\n        overtimeHoursValue = parseFloat(overtimeHours);\r\n      }\r\n    } else if (typeof overtimeHours === 'number') {\r\n      overtimeHoursValue = overtimeHours;\r\n    }\r\n\r\n    // Validate overtime hours\r\n    if (isNaN(overtimeHoursValue) || overtimeHoursValue < 0) {\r\n      throw new ApiError(400, \"Overtime hours cannot be negative\");\r\n    }\r\n\r\n    // Round to 2 decimal places\r\n    overtimeHoursValue = Math.round(overtimeHoursValue * 100) / 100;\r\n  } else {\r\n    // If absent, set both to 0\r\n    workingHoursValue = 0;\r\n    overtimeHoursValue = 0;\r\n  }\r\n\r\n  console.log('Processed hours - Working:', workingHoursValue, 'Overtime:', overtimeHoursValue);\r\n\r\n  // Find existing attendance record\r\n  const query = {\r\n    user: userId,\r\n    date: { $gte: attendanceDate, $lt: nextDay },\r\n    type,\r\n  }as any;\r\n\r\n  if (type === \"project\") {\r\n    query.project = projectId;\r\n  }\r\n\r\n  let attendance = await Attendance.findOne(query);\r\n\r\n  if (attendance) {\r\n    // Update existing record\r\n    attendance.present = present;\r\n    attendance.workingHours = workingHoursValue;\r\n    attendance.overtimeHours = overtimeHoursValue;\r\n    attendance.markedBy = markedBy;\r\n    await attendance.save();\r\n    console.log('Updated existing attendance record');\r\n  } else {\r\n    // Create new record\r\n    attendance = await Attendance.create({\r\n      project: type === \"project\" ? projectId : undefined,\r\n      user: userId,\r\n      present,\r\n      workingHours: workingHoursValue,\r\n      overtimeHours: overtimeHoursValue,\r\n      markedBy,\r\n      date: attendanceDate,\r\n      type,\r\n    });\r\n    console.log('Created new attendance record');\r\n  }\r\n\r\n  // Populate the response\r\n  const populatedAttendance = await Attendance.findById(attendance._id)\r\n    .populate(\"markedBy\", \"firstName lastName\")\r\n    .populate(\"project\", \"projectName\")\r\n    .populate(\"user\", \"firstName lastName\");\r\n\r\n  res\r\n    .status(200)\r\n    .json(new ApiResponse(200, populatedAttendance, \"Attendance saved successfully\"));\r\n});\r\n\r\n\r\n// Delete attendance record\r\nexport const deleteAttendanceRecord = asyncHandler(async (req:Request, res:Response) => {\r\n  const { attendanceId } = req.params;\r\n\r\n  if (!attendanceId) {\r\n    throw new ApiError(400, \"Attendance ID is required\");\r\n  }\r\n\r\n  const attendance = await Attendance.findById(attendanceId);\r\n  \r\n  if (!attendance) {\r\n    throw new ApiError(404, \"Attendance record not found\");\r\n  }\r\n\r\n  await Attendance.findByIdAndDelete(attendanceId);\r\n\r\n  res\r\n    .status(200)\r\n    .json(new ApiResponse(200, null, \"Attendance record deleted successfully\"));\r\n});\r\n\r\n// Get user attendance for specific date\r\nexport const getUserDateAttendance = asyncHandler(async (req: Request, res: Response) => {\r\n  const { userId } = req.params;\r\n  const { date } = req.query;\r\n\r\n  if (!userId || !date) {\r\n    throw new ApiError(400, \"User ID and date are required\");\r\n  }\r\n\r\n  // safely cast date to string\r\n  const dateStr = Array.isArray(date) ? date[0] : String(date);\r\n\r\n const attendanceDate = new Date(Array.isArray(date) ? String(date[0]) : String(date));\r\n\r\n\r\n  if (isNaN(attendanceDate.getTime())) {\r\n    throw new ApiError(400, \"Invalid date format\");\r\n  }\r\n\r\n  attendanceDate.setHours(0, 0, 0, 0);\r\n\r\n  const nextDay = new Date(attendanceDate);\r\n  nextDay.setDate(attendanceDate.getDate() + 1);\r\n\r\n  const attendance = await Attendance.find({\r\n    user: userId,\r\n    date: { $gte: attendanceDate, $lt: nextDay },\r\n  })\r\n    .populate(\"markedBy\", \"firstName lastName\")\r\n    .populate(\"project\", \"projectName\")\r\n    .sort({ type: 1 });\r\n\r\n  res\r\n    .status(200)\r\n    .json(new ApiResponse(200, attendance, \"Attendance records retrieved successfully\"));\r\n});\r\n\r\n\r\nexport const getUserProjects = asyncHandler(async (req:Request, res:Response) => {\r\n  const { userId } = req.params;\r\n\r\n  if (!userId) {\r\n    throw new ApiError(400, \"User ID is required\");\r\n  }\r\n\r\n  // Validate user exists\r\n  const user = await User.findById(userId);\r\n  if (!user) {\r\n    throw new ApiError(404, \"User not found\");\r\n  }\r\n\r\n  // Find projects where user is assigned as worker or driver\r\n  const projects = await Project.find({\r\n    $or: [\r\n      { assignedWorkers: userId },\r\n      { assignedDriver: userId }\r\n    ],\r\n    status: { \r\n      $in: [\r\n        'team_assigned', \r\n        'work_started', \r\n        'in_progress', \r\n        'work_completed',\r\n        'quality_check'\r\n      ] \r\n    } // Only active projects\r\n  })\r\n  .select(\"_id projectName projectNumber location building apartmentNumber client assignedWorkers assignedDriver\")\r\n  .populate(\"client\", \"clientName\")\r\n  .sort({ projectName: 1 });\r\n\r\n  // Format the response with assignment type\r\n  const formattedProjects = projects.map((project:any) => {\r\n    const isWorker = project.assignedWorkers?.some((worker:any) => worker.equals(userId));\r\n    const isDriver = project.assignedDriver?.equals(userId);\r\n    \r\n    let assignmentType = '';\r\n    if (isWorker && isDriver) {\r\n      assignmentType = 'Worker & Driver';\r\n    } else if (isWorker) {\r\n      assignmentType = 'Worker';\r\n    } else if (isDriver) {\r\n      assignmentType = 'Driver';\r\n    }\r\n\r\n    return {\r\n      _id: project._id,\r\n      projectName: project.projectName,\r\n      projectNumber: project.projectNumber,\r\n      location: project.location,\r\n      building: project.building,\r\n      apartmentNumber: project.apartmentNumber,\r\n      clientName: project.client?.clientName || 'N/A',\r\n      assignmentType: assignmentType\r\n    };\r\n  });\r\n\r\n  res\r\n    .status(200)\r\n    .json(new ApiResponse(200, formattedProjects, \"User projects retrieved successfully\"));\r\n});"]}
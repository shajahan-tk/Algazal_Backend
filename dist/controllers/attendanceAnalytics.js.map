{"version":3,"file":"attendanceAnalytics.js","sourceRoot":"","sources":["../../src/controllers/attendanceAnalytics.ts"],"names":[],"mappings":";;;;;;AAEA,wDAAqD;AACrD,kEAAyD;AACzD,kEAAsD;AACtD,+DAAuD;AACvD,mDAA2C;AAC3C,yDAAiD;AACjD,kDAA0B;AAC1B,uCAAiC;AAEjC,8BAA8B;AACjB,QAAA,gBAAgB,GAAG,IAAA,2BAAY,EAC1C,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACpC,MAAM,EAAE,MAAM,GAAG,SAAS,EAAE,IAAI,GAAG,IAAA,eAAK,GAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAE3E,uBAAuB;IACvB,MAAM,SAAS,GAAG,IAAA,eAAK,EAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IAClE,MAAM,OAAO,GAAG,IAAA,eAAK,EAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IAE9D,mBAAmB;IACnB,MAAM,CAAC,YAAY,EAAE,WAAW,EAAE,cAAc,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACpE,4BAAU,CAAC,cAAc,CAAC;YACxB,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;SACzC,CAAC;QACF,4BAAU,CAAC,cAAc,CAAC;YACxB,OAAO,EAAE,KAAK;YACd,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;SACzC,CAAC;QACF,gBAAI,CAAC,cAAc,CAAC,EAAE,CAAC;KACxB,CAAC,CAAC;IAEH,qBAAqB;IACrB,MAAM,YAAY,GAAG,MAAM,4BAAU,CAAC,SAAS,CAAC;QAC9C;YACE,MAAM,EAAE;gBACN,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;aACzC;SACF;QACD;YACE,MAAM,EAAE;gBACN,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE;gBACxB,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;gBACjE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;aACnB;SACF;QACD;YACE,QAAQ,EAAE;gBACR,KAAK,EAAE,MAAM;gBACb,cAAc,EAAE;oBACd,MAAM,EAAE;wBACN,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;wBACzD,CAAC;qBACF;iBACF;gBACD,GAAG,EAAE,CAAC;aACP;SACF;QACD,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;KACxB,CAAC,CAAC;IAEH,wBAAwB;IACxB,MAAM,UAAU,GAAG,MAAM,4BAAU,CAAC,SAAS,CAAC;QAC5C;YACE,MAAM,EAAE;gBACN,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;aACzC;SACF;QACD;YACE,OAAO,EAAE;gBACP,IAAI,EAAE,OAAO;gBACb,UAAU,EAAE,MAAM;gBAClB,YAAY,EAAE,KAAK;gBACnB,EAAE,EAAE,MAAM;aACX;SACF;QACD,EAAE,OAAO,EAAE,OAAO,EAAE;QACpB;YACE,MAAM,EAAE;gBACN,GAAG,EAAE,WAAW;gBAChB,IAAI,EAAE;oBACJ,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,gBAAgB,CAAC,EAAE;iBAChE;gBACD,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;gBACjE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;aACnB;SACF;QACD;YACE,QAAQ,EAAE;gBACR,UAAU,EAAE,MAAM;gBAClB,IAAI,EAAE,CAAC;gBACP,cAAc,EAAE;oBACd,MAAM,EAAE;wBACN,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;wBACzD,CAAC;qBACF;iBACF;gBACD,GAAG,EAAE,CAAC;aACP;SACF;QACD,EAAE,KAAK,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE;QACjC,EAAE,MAAM,EAAE,EAAE,EAAE;KACf,CAAC,CAAC;IAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB,IAAI,+BAAW,CACb,GAAG,EACH;QACE,MAAM;QACN,IAAI;QACJ,cAAc;QACd,YAAY;QACZ,WAAW;QACX,iBAAiB,EACf,CAAC,YAAY,GAAG,CAAC,YAAY,GAAG,WAAW,CAAC,CAAC,GAAG,GAAG;QACrD,YAAY;QACZ,aAAa,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,gBAAgB,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;KACjD,EACD,uCAAuC,CACxC,CACF,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,6BAA6B;AAChB,QAAA,gBAAgB,GAAG,IAAA,2BAAY,EAC1C,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACpC,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAClC,MAAM,EAAE,MAAM,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAEnC,2BAA2B;IAC3B,MAAM,QAAQ,GAAG,MAAM,gBAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,4BAAQ,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,OAAO,GAAG,IAAA,eAAK,GAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAA,eAAK,GAAE;SACtB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;SAClC,OAAO,CAAC,KAAK,CAAC;SACd,MAAM,EAAE,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,4BAAU,CAAC,SAAS,CAAC;QAC3C;YACE,MAAM,EAAE;gBACN,IAAI,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACpC,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;aACzC;SACF;QACD;YACE,MAAM,EAAE;gBACN,GAAG,EAAE,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;gBAC1D,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;gBACjE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;aACnB;SACF;QACD;YACE,QAAQ,EAAE;gBACR,KAAK,EAAE,MAAM;gBACb,cAAc,EAAE;oBACd,MAAM,EAAE;wBACN,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;wBACzD,CAAC;qBACF;iBACF;gBACD,WAAW,EAAE,UAAU;gBACvB,WAAW,EAAE,QAAQ;gBACrB,GAAG,EAAE,CAAC;aACP;SACF;QACD,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;KACxB,CAAC,CAAC;IAEH,mBAAmB;IACnB,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAC7B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACZ,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC;QAChC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC;QAC9B,OAAO,GAAG,CAAC;IACb,CAAC,EACD,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CACzB,CAAC;IAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB,IAAI,+BAAW,CACb,GAAG,EACH;QACE,QAAQ,EAAE;YACR,EAAE,EAAE,QAAQ,CAAC,GAAG;YAChB,IAAI,EAAE,GAAG,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,QAAQ,EAAE;YAClD,QAAQ,EAAE,QAAQ,CAAC,IAAI;SACxB;QACD,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;QACtB,SAAS;QACT,iBAAiB,EACf,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9D,YAAY,EAAE,MAAM,CAAC,OAAO;QAC5B,WAAW,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO;KAC3C,EACD,4CAA4C,CAC7C,CACF,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,4BAA4B;AACf,QAAA,sBAAsB,GAAG,IAAA,2BAAY,EAChD,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACpC,MAAM,EAAE,MAAM,GAAG,SAAS,EAAE,IAAI,GAAG,IAAA,eAAK,GAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAE3E,MAAM,QAAQ,GAAG,MAAM,sBAAO,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAEhE,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,GAAG,CACpC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;QAC7B,MAAM,KAAK,GAAG,MAAM,4BAAU,CAAC,SAAS,CAAC;YACvC;gBACE,MAAM,EAAE;oBACN,OAAO,EAAE,OAAO,CAAC,GAAG;oBACpB,IAAI,EAAE,SAAS;iBAChB;aACF;YACD;gBACE,MAAM,EAAE;oBACN,GAAG,EAAE,IAAI;oBACT,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;oBACjE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;iBACnB;aACF;SACF,CAAC,CAAC;QAEH,OAAO;YACL,SAAS,EAAE,OAAO,CAAC,GAAG;YACtB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,IAAI,CAAC;YAC/B,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;YAC3B,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG;gBAC3C,CAAC,CAAC,CAAC;SACN,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;IAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB,IAAI,+BAAW,CACb,GAAG,EACH;QACE,MAAM;QACN,IAAI;QACJ,YAAY,EAAE,YAAY,CAAC,IAAI,CAC7B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,cAAc,CAC9C;KACF,EACD,2CAA2C,CAC5C,CACF,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,gCAAgC;AACnB,QAAA,mBAAmB,GAAG,IAAA,2BAAY,EAC7C,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACpC,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IACjC,MAAM,EAAE,MAAM,GAAG,SAAS,EAAE,IAAI,GAAG,IAAA,eAAK,GAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAE3E,MAAM,OAAO,GAAG,MAAM,sBAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAClD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,4BAAQ,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM,SAAS,GAAG,MAAM,4BAAU,CAAC,SAAS,CAAC;QAC3C;YACE,MAAM,EAAE;gBACN,OAAO,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,SAAS,CAAC;gBACtC,IAAI,EAAE,SAAS;aAChB;SACF;QACD;YACE,OAAO,EAAE;gBACP,IAAI,EAAE,OAAO;gBACb,UAAU,EAAE,MAAM;gBAClB,YAAY,EAAE,KAAK;gBACnB,EAAE,EAAE,MAAM;aACX;SACF;QACD,EAAE,OAAO,EAAE,OAAO,EAAE;QACpB;YACE,MAAM,EAAE;gBACN,GAAG,EAAE;oBACH,MAAM,EACJ,MAAM,KAAK,SAAS;wBAClB,CAAC,CAAC,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;wBACvD,CAAC,CAAC,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;oBAC3D,MAAM,EAAE,WAAW;oBACnB,QAAQ,EAAE;wBACR,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,gBAAgB,CAAC,EAAE;qBAChE;iBACF;gBACD,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;gBACjE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;aACnB;SACF;QACD;YACE,MAAM,EAAE;gBACN,GAAG,EAAE,aAAa;gBAClB,MAAM,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE;gBACjC,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,MAAM,EAAE,aAAa;wBACrB,IAAI,EAAE,eAAe;wBACrB,OAAO,EAAE,UAAU;wBACnB,KAAK,EAAE,QAAQ;wBACf,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE;qBAC1C;iBACF;gBACD,YAAY,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;gBAClC,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;aAC9B;SACF;QACD;YACE,QAAQ,EAAE;gBACR,MAAM,EAAE,CAAC;gBACT,cAAc,EAAE;oBACd,MAAM,EAAE;wBACN;4BACE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC,EAAE,EAAE,GAAG,CAAC;yBAC/D;wBACD,CAAC;qBACF;iBACF;gBACD,OAAO,EAAE;oBACP,IAAI,EAAE;wBACJ,KAAK,EAAE,UAAU;wBACjB,EAAE,EAAE,QAAQ;wBACZ,EAAE,EAAE;4BACF,MAAM,EAAE,iBAAiB;4BACzB,IAAI,EAAE,eAAe;4BACrB,WAAW,EAAE,kBAAkB;4BAC/B,SAAS,EAAE,gBAAgB;4BAC3B,cAAc,EAAE;gCACd,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,eAAe,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;6BACnD;yBACF;qBACF;iBACF;gBACD,GAAG,EAAE,CAAC;aACP;SACF;QACD,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;KACzB,CAAC,CAAC;IAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB,IAAI,+BAAW,CACb,GAAG,EACH;QACE,OAAO,EAAE;YACP,EAAE,EAAE,OAAO,CAAC,GAAG;YACf,IAAI,EAAE,OAAO,CAAC,WAAW;YACzB,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,OAAO,EAAE,OAAO,CAAC,SAAS;SAC3B;QACD,MAAM;QACN,IAAI;QACJ,SAAS;KACV,EACD,0CAA0C,CAC3C,CACF,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["// controllers/attendanceAnalytics.controller.ts\r\nimport { Request, Response } from \"express\";\r\nimport { asyncHandler } from \"../utils/asyncHandler\";\r\nimport { ApiResponse } from \"../utils/apiHandlerHelpers\";\r\nimport { ApiError } from \"../utils/apiHandlerHelpers\";\r\nimport { Attendance } from \"../models/attendanceModel\";\r\nimport { User } from \"../models/userModel\";\r\nimport { Project } from \"../models/projectModel\";\r\nimport dayjs from \"dayjs\";\r\nimport { Types } from \"mongoose\";\r\n\r\n// 1. Dashboard Overview Stats\r\nexport const getOverviewStats = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { period = \"monthly\", year = dayjs().year().toString() } = req.query;\r\n\r\n    // Calculate date range\r\n    const startDate = dayjs(`${year}-01-01`).startOf(\"year\").toDate();\r\n    const endDate = dayjs(`${year}-12-31`).endOf(\"year\").toDate();\r\n\r\n    // Get basic counts\r\n    const [totalPresent, totalAbsent, totalEmployees] = await Promise.all([\r\n      Attendance.countDocuments({\r\n        present: true,\r\n        date: { $gte: startDate, $lte: endDate },\r\n      }),\r\n      Attendance.countDocuments({\r\n        present: false,\r\n        date: { $gte: startDate, $lte: endDate },\r\n      }),\r\n      User.countDocuments({}),\r\n    ]);\r\n\r\n    // Monthly trend data\r\n    const monthlyTrend = await Attendance.aggregate([\r\n      {\r\n        $match: {\r\n          date: { $gte: startDate, $lte: endDate },\r\n        },\r\n      },\r\n      {\r\n        $group: {\r\n          _id: { $month: \"$date\" },\r\n          present: { $sum: { $cond: [{ $eq: [\"$present\", true] }, 1, 0] } },\r\n          total: { $sum: 1 },\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          month: \"$_id\",\r\n          attendanceRate: {\r\n            $round: [\r\n              { $multiply: [{ $divide: [\"$present\", \"$total\"] }, 100] },\r\n              1,\r\n            ],\r\n          },\r\n          _id: 0,\r\n        },\r\n      },\r\n      { $sort: { month: 1 } },\r\n    ]);\r\n\r\n    // Top/Bottom performers\r\n    const performers = await Attendance.aggregate([\r\n      {\r\n        $match: {\r\n          date: { $gte: startDate, $lte: endDate },\r\n        },\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"users\",\r\n          localField: \"user\",\r\n          foreignField: \"_id\",\r\n          as: \"user\",\r\n        },\r\n      },\r\n      { $unwind: \"$user\" },\r\n      {\r\n        $group: {\r\n          _id: \"$user._id\",\r\n          name: {\r\n            $first: { $concat: [\"$user.firstName\", \" \", \"$user.lastName\"] },\r\n          },\r\n          present: { $sum: { $cond: [{ $eq: [\"$present\", true] }, 1, 0] } },\r\n          total: { $sum: 1 },\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          employeeId: \"$_id\",\r\n          name: 1,\r\n          attendanceRate: {\r\n            $round: [\r\n              { $multiply: [{ $divide: [\"$present\", \"$total\"] }, 100] },\r\n              1,\r\n            ],\r\n          },\r\n          _id: 0,\r\n        },\r\n      },\r\n      { $sort: { attendanceRate: -1 } },\r\n      { $limit: 10 },\r\n    ]);\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          period,\r\n          year,\r\n          totalEmployees,\r\n          totalPresent,\r\n          totalAbsent,\r\n          overallAttendance:\r\n            (totalPresent / (totalPresent + totalAbsent)) * 100,\r\n          monthlyTrend,\r\n          topPerformers: performers.slice(0, 5),\r\n          bottomPerformers: performers.slice(-5).reverse(),\r\n        },\r\n        \"Overview stats retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// 2. Employee Trend Analysis\r\nexport const getEmployeeTrend = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { employeeId } = req.params;\r\n    const { months = \"6\" } = req.query;\r\n\r\n    // Validate employee exists\r\n    const employee = await User.findById(employeeId);\r\n    if (!employee) {\r\n      throw new ApiError(404, \"Employee not found\");\r\n    }\r\n\r\n    const endDate = dayjs().endOf(\"day\").toDate();\r\n    const startDate = dayjs()\r\n      .subtract(Number(months), \"months\")\r\n      .startOf(\"day\")\r\n      .toDate();\r\n\r\n    const trendData = await Attendance.aggregate([\r\n      {\r\n        $match: {\r\n          user: new Types.ObjectId(employeeId),\r\n          date: { $gte: startDate, $lte: endDate },\r\n        },\r\n      },\r\n      {\r\n        $group: {\r\n          _id: { $dateToString: { format: \"%Y-%m\", date: \"$date\" } },\r\n          present: { $sum: { $cond: [{ $eq: [\"$present\", true] }, 1, 0] } },\r\n          total: { $sum: 1 },\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          month: \"$_id\",\r\n          attendanceRate: {\r\n            $round: [\r\n              { $multiply: [{ $divide: [\"$present\", \"$total\"] }, 100] },\r\n              1,\r\n            ],\r\n          },\r\n          presentDays: \"$present\",\r\n          workingDays: \"$total\",\r\n          _id: 0,\r\n        },\r\n      },\r\n      { $sort: { month: 1 } },\r\n    ]);\r\n\r\n    // Calculate totals\r\n    const totals = trendData.reduce(\r\n      (acc, curr) => {\r\n        acc.present += curr.presentDays;\r\n        acc.total += curr.workingDays;\r\n        return acc;\r\n      },\r\n      { present: 0, total: 0 }\r\n    );\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          employee: {\r\n            id: employee._id,\r\n            name: `${employee.firstName} ${employee.lastName}`,\r\n            position: employee.role,\r\n          },\r\n          months: Number(months),\r\n          trendData,\r\n          overallAttendance:\r\n            totals.total > 0 ? (totals.present / totals.total) * 100 : 0,\r\n          totalPresent: totals.present,\r\n          totalAbsent: totals.total - totals.present,\r\n        },\r\n        \"Employee trend data retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// 3. All Projects Analytics\r\nexport const getProjectAnalyticsAll = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { period = \"monthly\", year = dayjs().year().toString() } = req.query;\r\n\r\n    const projects = await Project.find().select(\"_id projectName\");\r\n\r\n    const projectStats = await Promise.all(\r\n      projects.map(async (project) => {\r\n        const stats = await Attendance.aggregate([\r\n          {\r\n            $match: {\r\n              project: project._id,\r\n              type: \"project\",\r\n            },\r\n          },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              present: { $sum: { $cond: [{ $eq: [\"$present\", true] }, 1, 0] } },\r\n              total: { $sum: 1 },\r\n            },\r\n          },\r\n        ]);\r\n\r\n        return {\r\n          projectId: project._id,\r\n          projectName: project.projectName,\r\n          present: stats[0]?.present || 0,\r\n          total: stats[0]?.total || 0,\r\n          attendanceRate: stats[0]\r\n            ? (stats[0].present / stats[0].total) * 100\r\n            : 0,\r\n        };\r\n      })\r\n    );\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          period,\r\n          year,\r\n          projectStats: projectStats.sort(\r\n            (a, b) => b.attendanceRate - a.attendanceRate\r\n          ),\r\n        },\r\n        \"All projects stats retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// 4. Specific Project Analytics\r\nexport const getProjectAnalytics = asyncHandler(\r\n  async (req: Request, res: Response) => {\r\n    const { projectId } = req.params;\r\n    const { period = \"monthly\", year = dayjs().year().toString() } = req.query;\r\n\r\n    const project = await Project.findById(projectId);\r\n    if (!project) {\r\n      throw new ApiError(404, \"Project not found\");\r\n    }\r\n\r\n    const analytics = await Attendance.aggregate([\r\n      {\r\n        $match: {\r\n          project: new Types.ObjectId(projectId),\r\n          type: \"project\",\r\n        },\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"users\",\r\n          localField: \"user\",\r\n          foreignField: \"_id\",\r\n          as: \"user\",\r\n        },\r\n      },\r\n      { $unwind: \"$user\" },\r\n      {\r\n        $group: {\r\n          _id: {\r\n            period:\r\n              period === \"monthly\"\r\n                ? { $dateToString: { format: \"%Y-%m\", date: \"$date\" } }\r\n                : { $dateToString: { format: \"%Y-%U\", date: \"$date\" } },\r\n            userId: \"$user._id\",\r\n            userName: {\r\n              $first: { $concat: [\"$user.firstName\", \" \", \"$user.lastName\"] },\r\n            },\r\n          },\r\n          present: { $sum: { $cond: [{ $eq: [\"$present\", true] }, 1, 0] } },\r\n          total: { $sum: 1 },\r\n        },\r\n      },\r\n      {\r\n        $group: {\r\n          _id: \"$_id.period\",\r\n          period: { $first: \"$_id.period\" },\r\n          workers: {\r\n            $push: {\r\n              userId: \"$_id.userId\",\r\n              name: \"$_id.userName\",\r\n              present: \"$present\",\r\n              total: \"$total\",\r\n              rate: { $divide: [\"$present\", \"$total\"] },\r\n            },\r\n          },\r\n          totalPresent: { $sum: \"$present\" },\r\n          totalDays: { $sum: \"$total\" },\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          period: 1,\r\n          attendanceRate: {\r\n            $round: [\r\n              {\r\n                $multiply: [{ $divide: [\"$totalPresent\", \"$totalDays\"] }, 100],\r\n              },\r\n              1,\r\n            ],\r\n          },\r\n          workers: {\r\n            $map: {\r\n              input: \"$workers\",\r\n              as: \"worker\",\r\n              in: {\r\n                userId: \"$$worker.userId\",\r\n                name: \"$$worker.name\",\r\n                presentDays: \"$$worker.present\",\r\n                totalDays: \"$$worker.total\",\r\n                attendanceRate: {\r\n                  $round: [{ $multiply: [\"$$worker.rate\", 100] }, 1],\r\n                },\r\n              },\r\n            },\r\n          },\r\n          _id: 0,\r\n        },\r\n      },\r\n      { $sort: { period: 1 } },\r\n    ]);\r\n\r\n    res.status(200).json(\r\n      new ApiResponse(\r\n        200,\r\n        {\r\n          project: {\r\n            id: project._id,\r\n            name: project.projectName,\r\n            startDate: project.createdAt,\r\n            endDate: project.updatedAt,\r\n          },\r\n          period,\r\n          year,\r\n          analytics,\r\n        },\r\n        \"Project analytics retrieved successfully\"\r\n      )\r\n    );\r\n  }\r\n);\r\n"]}
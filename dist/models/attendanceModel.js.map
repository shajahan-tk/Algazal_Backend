{"version":3,"file":"attendanceModel.js","sourceRoot":"","sources":["../../src/models/attendanceModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Document, Schema, model, Types } from \"mongoose\";\r\n\r\nexport interface IAttendance extends Document {\r\n  project?: Types.ObjectId; // Make optional for normal type\r\n  user: Types.ObjectId;\r\n  date: Date;\r\n  present: boolean;\r\n  markedBy: Types.ObjectId;\r\n  type: \"project\" | \"normal\";\r\n  workingHours: number;\r\n  overtimeHours: number;\r\n  createdAt: Date;\r\n}\r\n\r\nconst attendanceSchema = new Schema<IAttendance>(\r\n  {\r\n    project: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Project\",\r\n      required: function () {\r\n        return this.type === \"project\";\r\n      },\r\n    },\r\n    user: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: Date,\r\n      required: true,\r\n      default: Date.now(),\r\n    },\r\n    present: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    markedBy: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    type: {\r\n      type: String,\r\n      enum: [\"project\", \"normal\"],\r\n      required: true,\r\n      default: \"project\",\r\n    },\r\n    workingHours: {\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n      max: 24,\r\n      default: 0,\r\n    },\r\n    overtimeHours: {\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n      default: 0,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Calculate overtime before saving\r\nattendanceSchema.pre<IAttendance>(\"save\", function (next) {\r\n  if (this.isModified(\"workingHours\")) {\r\n    const basicHours = 10;\r\n    this.overtimeHours = Math.max(0, this.workingHours - basicHours);\r\n  }\r\n  next();\r\n});\r\n\r\n// FIXED: Separate compound indexes for different attendance types\r\n// Index for project attendance (project + user + date must be unique)\r\nattendanceSchema.index(\r\n  { project: 1, user: 1, date: 1, type: 1 },\r\n  {\r\n    unique: true,\r\n    partialFilterExpression: { type: \"project\" },\r\n    name: \"project_attendance_unique\"\r\n  }\r\n);\r\n\r\n// Index for normal attendance (user + date must be unique for normal type)\r\nattendanceSchema.index(\r\n  { user: 1, date: 1, type: 1 },\r\n  {\r\n    unique: true,\r\n    partialFilterExpression: { type: \"normal\" },\r\n    name: \"normal_attendance_unique\"\r\n  }\r\n);\r\n\r\n// Additional indexes for query optimization\r\nattendanceSchema.index({ user: 1, date: 1 }, { name: \"user_date_lookup\" });\r\nattendanceSchema.index({ user: 1, type: 1, date: 1 }, { name: \"user_type_date_lookup\" });\r\nattendanceSchema.index({ project: 1, date: 1 }, { name: \"project_date_lookup\" });\r\nattendanceSchema.index({ date: 1, type: 1 }, { name: \"date_type_lookup\" });\r\n\r\nexport const Attendance = model<IAttendance>(\"Attendance\", attendanceSchema);"]}